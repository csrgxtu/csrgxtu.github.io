<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>csrgxtu</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-09-23T17:55:12.026Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Archer Reilly</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How coroutine works internally [Drafting]</title>
    <link href="http://yoursite.com/2020/05/07/How-coroutine-works-internally/"/>
    <id>http://yoursite.com/2020/05/07/How-coroutine-works-internally/</id>
    <published>2020-05-07T02:47:51.000Z</published>
    <updated>2020-09-23T17:55:12.026Z</updated>
    
    <content type="html"><![CDATA[<p>Coroutines are generalization of subroutines. they are used for cooperative multitasking where a process voluntarily yield(give away) control periodically or when idle in order to enable multiple applications to be run simultaneously. compare to thread, coroutine is context-swtich in User space by programming language or by programmer itself, but thread is managed by OS. but anyway, do you know how Python implements coroutine? or how can it yield control away and lately resume back?</p><h3 id="A-simple-usage-example"><a href="#A-simple-usage-example" class="headerlink" title="A simple usage example"></a>A simple usage example</h3><h3 id="The-Internal"><a href="#The-Internal" class="headerlink" title="The Internal"></a>The Internal</h3><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><a href="https://www.geeksforgeeks.org/coroutine-in-python/" target="_blank" rel="noopener">coroutine in python</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Coroutines are generalization of subroutines. they are used for cooperative multitasking where a process voluntarily yield(give away) con
      
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="coroutine" scheme="http://yoursite.com/tags/coroutine/"/>
    
  </entry>
  
  <entry>
    <title>Stop naming your modules utils [转]</title>
    <link href="http://yoursite.com/2020/04/21/Stop-naming-your-modules-utils/"/>
    <id>http://yoursite.com/2020/04/21/Stop-naming-your-modules-utils/</id>
    <published>2020-04-21T08:39:53.000Z</published>
    <updated>2020-09-23T17:55:12.030Z</updated>
    
    <content type="html"><![CDATA[<p>看到这篇文章的时候，内心是崩溃的，里面说的bad practice我们目前项目中都有，一个不落。就像写出了非Pythonic的代码，它没有validate Python Grammer，可以正常工作，但就是维护起来费劲。所以说在正确的前提下，我们要尽量在工程中做到这些Best Pracice说到的东西。</p><a id="more"></a><p>总结原文就是我们会在某些情况下将一些通用的或者无法归类的逻辑放在诸如：<code>util</code>, <code>common</code>等模块中</p><ul><li>单个无法归类的function放入util中</li><li>多个模块公用的就放在了common中</li></ul><p>然后后续的programmer因为这个会继续向util中添加很多逻辑，久而久之其变的更加多元化，不确定。当你看到这个模块的时候，你无法确定其具体实现了什么功能，在其它项目模块需要使用util or common中的方法的时候需要将其整体引入的项目中，增加了代码复杂度。</p><p>总而言之，根据Python的哲学：Explicit is better than implicit，我们应该保持项目的简介清晰，尽量避免一些模棱两可的东西。</p><p>下面是原文：<br>Imagine the following situation: there is a software developer that is either adding new code or refactoring existing one by extracting a class/function. They have to place code somewhere, but it does not seem to fit anywhere. So what does a developer do? They create a new module – utils.py.</p><h3 id="Why-utils-is-a-terrible-name"><a href="#Why-utils-is-a-terrible-name" class="headerlink" title="Why utils is a terrible name?"></a>Why utils is a terrible name?</h3><p>utils is arguably one of the worst names for a module because it is very blurry and imprecise. Such a name does not say what is the purpose of code inside. On the contrary, a utils module can as well contain almost anything. By naming a module utils, a software developer lays down perfect conditions for an incohesive code blob. Since the module name does not hint team members if something fits there or not, it is likely that unrelated code will eventually appear there, as more utils. More on it later.</p><p>Synonyms of utils, like helpers, commons, etc. are bad for the same reason.</p><h3 id="Why-people-do-this"><a href="#Why-people-do-this" class="headerlink" title="Why people do this?"></a>Why people do this?</h3><h4 id="Excuse-I-–-it-is-just-one-function"><a href="#Excuse-I-–-it-is-just-one-function" class="headerlink" title="Excuse I – it is just one function"></a>Excuse I – it is just one function</h4><p>Initially, yes – it may be just one function. One function in a badly named module is not that wrong, isn’t it?</p><p>It is. Similarly to the broken windows theory, one occurrence of misbehaviour invites more of them. One function or class in utils is a small problem, indeed. Hence, it should be refactored when it is easy. Once the utils module grows, it will require a lot more effort to split it. And surprise, surprise, no one will be willing to do that.</p><p>How bad it can get? Once, in one Python repository, I saw there were several utils.py modules. My favourite contained 13 various functions and one utility class. What were these functions doing? Everything, from validation to data normalization to saving to the database to sending HTTP requests to getting current datetime formatted accordingly to the format parameter (Yes, separate, loose functions).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_post_request</span><span class="params">(url, data, logger)</span>:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_details</span><span class="params">(source_obj, override_data_from_source_obj: dict = None)</span>:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalize_address</span><span class="params">(address: str)</span> -&gt; str:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>That’s how programming hell looks like. utils.py quickly becomes a whirlpool for all code that does not fit other places. It smoothly leads us to excuse number 2…</p><h4 id="Excuse-II-–-There-is-no-other-place-to-put-this-code"><a href="#Excuse-II-–-There-is-no-other-place-to-put-this-code" class="headerlink" title="Excuse II – There is no other place to put this code"></a>Excuse II – There is no other place to put this code</h4><p>Indeed, there may be no place that a new class/function fits. Reaction to create a new place for the code is good. However, a programmer needs to put more effort when thinking about the name. As we know, taking the easiest road with utils is a slippery slope.</p><p>We can do better by naming module by the purpose of functions living inside. If they will be creating other objects, let’s name it factories.py. If their role is validation – go for validators.py. Maybe we need a few functions that operate on phone numbers? See if they could not be a regular, stateful class PhoneNumber and just put it in a separate file – phone_number.py.</p><p>A special case – functions with business logic. There are many techniques for that, some of them are more sophisticated than others (e.g. the Clean Architecture) but let’s consider a simple case. Assuming we have Django + DRF web application that contains business logic in serializers. We slowly migrate our API to version 2 and we need to put business logic extracted from V1 serializer in some other place, so that serializer V2 may reuse that. DO NOT PUT THIS IN utils.py. Try putting business logic in services.py module. Name service comes from an application service – a single thing that the application does for the clients. If this was, for example, booking a flight, a service could be named flight_booking_service and would:</p><ul><li>authorize payment on customer’s payment card</li><li>reserve a flight using 3rd party provider</li><li>send an email (or scheduled a Celery task to do so)</li></ul><h4 id="Excuse-III-I-need-a-place-for-company-commons"><a href="#Excuse-III-I-need-a-place-for-company-commons" class="headerlink" title="Excuse III I need a place for company commons"></a>Excuse III I need a place for company commons</h4><p>Let’s say you are building a distributed application and there are chunks of code that needs to be reused in a majority or all microservices. It is a natural reaction to put them together in someplace, like a separate repository to be installed as a package. But please don’t call it {company_name}-utils. I heard about a case of such a repository, but luckily for its maintainers, it was not that big. It contains code responsible for:</p><p>secrets handling, using public cloud services<br>logging configuration that uses specific public services<br>As I said, it’s not that bad but it would be nice if they were more specific with the name, for example, cloud-toolkit or split that into two separate repositories/packages because frankly there are microservices that use only one of functionalities.</p><h4 id="Excuse-IIII-–-But-Django-does-that"><a href="#Excuse-IIII-–-But-Django-does-that" class="headerlink" title="Excuse IIII – But Django does that"></a>Excuse IIII – But Django does that</h4><p>Yes, there is a couple of utils packages in Django. Shame on them for using utils name. However, notice that at least some of them could be separated from the framework and bundled as optional dependencies. Also, at least they are grouped in cohesive sub-packages – e.g. django.utils.timezone or django.utils.translation.</p><p>Unless you are writing a framework, stay away from utils. 😉</p><h4 id="Are-all-utils-bad"><a href="#Are-all-utils-bad" class="headerlink" title="Are all utils bad?"></a>Are all utils bad?</h4><p>Not exactly. Eventually, one may need a couple of auxiliary functions. In that case, organize such code in modules named by theme – like datetimes, phone_numbers, etc. Such functions should be pure (in terms of functional programming).</p><p>Pure Functions – do not have side effects, that is, they do not change the state of the program. Given the same input, a pure function will always produce the same output.</p><p><a href="https://stackabuse.com/functional-programming-in-python/" target="_blank" rel="noopener">https://stackabuse.com/functional-programming-in-python/</a></p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>Do not use utils as a name for your Python module neither put it into a class name. Try to be more specific about the role of code – e.g. create a place for validators, services or factories. If the role criterion doesn’t help and you really dealing with utils, try grouping code by its theme –</p><p>utils modules are dangerous, because they deteriorate over time. Each and another person that adds something that does not fit anywhere will happily add it to the utils module, increasing its incohesion. The disorder will grow over time, becoming greater and greater burden to work with.</p><p>If you see a newly created utils module in a code review, request it to be renamed. If you are tempted to add something to existing utils, create a new place for your code and move there everything from utils that fits a newly created module.</p><p>In the end, you will exercise your brain to become better at designing code.</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://breadcrumbscollector.tech/stop-naming-your-python-modules-utils/" target="_blank" rel="noopener">Stop naming your python module ‘utils’</a><br><a href="http://www.adam-bien.com/roller/abien/entry/util_packages_are_evil" target="_blank" rel="noopener">Util package are evil</a>  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看到这篇文章的时候，内心是崩溃的，里面说的bad practice我们目前项目中都有，一个不落。就像写出了非Pythonic的代码，它没有validate Python Grammer，可以正常工作，但就是维护起来费劲。所以说在正确的前提下，我们要尽量在工程中做到这些Best Pracice说到的东西。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Software Engeering" scheme="http://yoursite.com/tags/Software-Engeering/"/>
    
      <category term="Best practice" scheme="http://yoursite.com/tags/Best-practice/"/>
    
  </entry>
  
  <entry>
    <title>Python Dict: a new implementation by pure Python</title>
    <link href="http://yoursite.com/2020/04/21/Python-Dict-a-new-implementation-by-pure-Python/"/>
    <id>http://yoursite.com/2020/04/21/Python-Dict-a-new-implementation-by-pure-Python/</id>
    <published>2020-04-21T06:57:23.000Z</published>
    <updated>2020-09-23T17:55:12.030Z</updated>
    
    <content type="html"><![CDATA[<p>Python have builtin implementation for <code>dict</code>, which is used to store key-value and also provided other related operations. Due to it is an frequenctly used basic data type, here I will use pure Python implement an <code>dict</code>.</p><a id="more"></a><h3 id="Hash-map"><a href="#Hash-map" class="headerlink" title="Hash map"></a>Hash map</h3><p>As we learned from data structure, hash map is a data structure that can be used to store key-value and later retrieve value by key from it with almost constant O(1) time.</p><p>A hash map use a <code>hash</code> function to compute an index, also called hash code into an array of buckets or slots from which the desired value can be found.  </p><p>Ideally the hash function will assign each key to a unique bucket, but most hash table use an imperfect hash function, which might cuz hash collisions where the hash function will generates the same index for different keys.  </p><p>In a well-dimensioned hash map, the average cost for each look up is constant and also allow arbitrary insertions and deletions of key-value pairs in constant time.</p><p>Basically, it will have following complexity:</p><table><thead><tr><th align="center"></th><th>Avg</th><th>Worst</th></tr></thead><tbody><tr><td align="center">Space</td><td>O(n)</td><td>O(n)</td></tr><tr><td align="center">Search</td><td>O(1)</td><td>O(n)</td></tr><tr><td align="center">Insert</td><td>O(1)</td><td>O(n)</td></tr><tr><td align="center">Delete</td><td>O(1)</td><td>O(n)</td></tr></tbody></table><p>To summary, it will have an hash function, also need an storage. when hash collisions, need to solve the collisions somehow. for more detail, read the reference.</p><h3 id="Basic-version"><a href="#Basic-version" class="headerlink" title="Basic version"></a>Basic version</h3><p>So, basicly we need solve three things:</p><ul><li>a hash function that will take key as input and output an index</li><li>a storage which will be used to hold the key-value pairs</li><li>how to solve hash collision</li></ul><p>for first prolem, we can use Python’s built-in method <code>hash</code> which will take input and output the index for us.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">hash</span>(...)</span><br><span class="line">    <span class="built_in">hash</span>(object) -&gt; <span class="built_in">integer</span></span><br><span class="line"></span><br><span class="line">    Return a <span class="built_in">hash</span> value <span class="keyword">for</span> the object.  Two objects with the same value have</span><br><span class="line">    the same <span class="built_in">hash</span> value.  The reverse is not necessarily <span class="literal">true</span>, but likely.</span><br></pre></td></tr></table></figure><p>for second problem, we use Python’s <code>list</code> as the storage, we store the <code>[key, value]</code> into this list. we will hash key and get an index, use this index as the <code>list</code> index.</p><p>for third problem, if multiple key hashed into same index, we use a sub_list in <code>storage[index]</code> to chain multiple key-value pairs into that sub_list. here is a image which shows how to use chainning solve the collision:<br><img src="https://media.geeksforgeeks.org/wp-content/cdn-uploads/gq/2015/07/hashChaining1.png" alt="chainning collision solver"> </p><p>To set key-value and get value by key like defeault dict <code>data_map[&#39;name&#39;] = &#39;shopee&#39;</code> <code>data[&#39;name&#39;]</code>, we need implement magic methods <code>__setitem__</code> and <code>__getitem__</code>, here is the basic implementation:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">my implementation for dict</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dictionary</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    implementation for dict</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, size=<span class="number">1000</span>)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        use list as storage, each element is also a list which is used</span></span><br><span class="line"><span class="string">        to solve hash conflict</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.storage = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> range(size)]</span><br><span class="line">        self.size = size</span><br><span class="line">        self.length = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        set key value, if conflict, append to the sub list</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        storage_idx = hash(key) % self.size</span><br><span class="line">        <span class="keyword">for</span> ele <span class="keyword">in</span> self.storage[storage_idx]:</span><br><span class="line">            <span class="keyword">if</span> key == ele[<span class="number">0</span>]:  <span class="comment"># already exist, update it</span></span><br><span class="line">                ele[<span class="number">1</span>] = value</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.storage[storage_idx].append([key, value])</span><br><span class="line">            self.length += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        get by key, if not found, raise key error</span></span><br><span class="line"><span class="string">        :raise: KeyError</span></span><br><span class="line"><span class="string">        :return: value</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        storage_idx = hash(key) % self.size</span><br><span class="line">        <span class="keyword">for</span> ele <span class="keyword">in</span> self.storage[storage_idx]:</span><br><span class="line">            <span class="keyword">if</span> ele[<span class="number">0</span>] == key:</span><br><span class="line">                <span class="keyword">return</span> ele[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">raise</span> KeyError(<span class="string">'Key &#123;&#125; dont exist'</span>.format(key))</span><br></pre></td></tr></table></figure><p>Here use ipython and test our <code>Dictionary</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ ipython</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">In [1]: from dictionary import Dictionary</span><br><span class="line"></span><br><span class="line">In [2]: d = Dictionary()</span><br><span class="line"></span><br><span class="line">In [3]: d[<span class="string">'name'</span>] = <span class="string">'shopee'</span></span><br><span class="line"></span><br><span class="line">In [4]: d[<span class="string">'age'</span>] = 22</span><br><span class="line"></span><br><span class="line">In [5]: d[<span class="string">'name'</span>]</span><br><span class="line">Out[5]: <span class="string">'shopee'</span></span><br></pre></td></tr></table></figure><p>It is workable now, but not perfect yet, like we isnt implement other operations related to <code>dict</code> yet.</p><h3 id="More-magic-methods"><a href="#More-magic-methods" class="headerlink" title="More magic methods"></a>More magic methods</h3><p>The default dict also supports following:</p><ul><li>check if key in current dict</li><li>iterate over keys</li><li>iterate over values</li><li>iterate over key-value pairs</li><li>delete item by key</li><li>get length of current dict</li><li>string representation of current dict<br>to implement upper functionalities, we can use Python’s magic methods, for example, for iterator related functionalities, we can use <code>__iter__</code>, for string representation functionality, we can use <code>__str__</code> or <code>__repr__</code>. for checking the key in current dict, we can use <code>__contains__</code>. here is the detailed implementation:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">my implementation for dict</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dictionary</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    implementation for dict</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delitem__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        delete key value from current dictionary instance</span></span><br><span class="line"><span class="string">        :param key: str</span></span><br><span class="line"><span class="string">        :return: None</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        storage_idx = hash(key) % self.size</span><br><span class="line">        <span class="keyword">for</span> sub_lst <span class="keyword">in</span> self.storage[storage_idx]:</span><br><span class="line">            <span class="keyword">if</span> key == sub_lst[<span class="number">0</span>]:</span><br><span class="line">                self.storage[storage_idx].remove(sub_lst)</span><br><span class="line">                self.length -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">raise</span> KeyError(<span class="string">'Key &#123;&#125; dont exist'</span>.format(key))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__contains__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        check if key exist in current diction</span></span><br><span class="line"><span class="string">        :param key: str</span></span><br><span class="line"><span class="string">        :return: boolean</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        storage_idx = hash(key) % self.size</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> self.storage[storage_idx]:</span><br><span class="line">            <span class="keyword">if</span> item[<span class="number">0</span>] == key:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        return length</span></span><br><span class="line"><span class="string">        :return: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.length</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iterate_kv</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        return an iterator</span></span><br><span class="line"><span class="string">        :return: generator</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">for</span> sub_lst <span class="keyword">in</span> self.storage:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> sub_lst:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> sub_lst:</span><br><span class="line">                <span class="keyword">yield</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        return an iterator</span></span><br><span class="line"><span class="string">        :return: generator</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">for</span> key_var <span class="keyword">in</span> self.__iterate_kv():</span><br><span class="line">            <span class="keyword">yield</span> key_var[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">keys</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        get all keys as list</span></span><br><span class="line"><span class="string">        :return: list</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.__iter__()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">values</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        get all values as list</span></span><br><span class="line"><span class="string">        :return: list</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">for</span> key_var <span class="keyword">in</span> self.__iterate_kv():</span><br><span class="line">            <span class="keyword">yield</span> key_var[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">items</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        get all k:v as list</span></span><br><span class="line"><span class="string">        :return: list</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.__iterate_kv()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        get value by key</span></span><br><span class="line"><span class="string">        :param key: str</span></span><br><span class="line"><span class="string">        :return: value</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self.__getitem__(key)</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        str representation of the dictionary</span></span><br><span class="line"><span class="string">        :return: string</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> ele <span class="keyword">in</span> self.storage:</span><br><span class="line">            <span class="keyword">for</span> key_value <span class="keyword">in</span> ele:</span><br><span class="line">                <span class="keyword">if</span> isinstance(key_value[<span class="number">0</span>], str):</span><br><span class="line">                    key_str = <span class="string">'\'&#123;&#125;\''</span>.format(key_value[<span class="number">0</span>])</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    key_str = <span class="string">'&#123;&#125;'</span>.format(key_value[<span class="number">0</span>])</span><br><span class="line">                <span class="keyword">if</span> isinstance(key_value[<span class="number">1</span>], str):</span><br><span class="line">                    value_str = <span class="string">'\'&#123;&#125;\''</span>.format(key_value[<span class="number">1</span>])</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    value_str = <span class="string">'&#123;&#125;'</span>.format(key_value[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">                res.append(<span class="string">'&#123;&#125;: &#123;&#125;'</span>.format(key_str, value_str))</span><br><span class="line">        key_value_pairs_str = <span class="string">'&#123;&#125;'</span>.format(<span class="string">', '</span>.join(res))</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&#123;'</span> + key_value_pairs_str + <span class="string">'&#125;'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        string representation of the class instances</span></span><br><span class="line"><span class="string">        :return: string</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.__str__()</span><br></pre></td></tr></table></figure><p>To test it, we try to iterate the dict and check if it contains the key:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">In [6]: <span class="keyword">for</span> key <span class="keyword">in</span> d.keys():</span><br><span class="line">   ...:     <span class="built_in">print</span> <span class="string">'&#123;&#125; : &#123;&#125;'</span>.format(key, d.get(key))</span><br><span class="line">   ...:</span><br><span class="line">name : shopee</span><br><span class="line">age : 22</span><br><span class="line"></span><br><span class="line">In [7]: d</span><br><span class="line">Out[7]: &#123;<span class="string">'name'</span>: <span class="string">'shopee'</span>, <span class="string">'age'</span>: 22&#125;</span><br><span class="line"></span><br><span class="line">In [8]: <span class="string">'name'</span> <span class="keyword">in</span> d</span><br><span class="line">Out[8]: True</span><br></pre></td></tr></table></figure><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>So, this is just a simple implementation of Python dict by using Python’s list and hash built-ins. to extend, you can also implement <code>clean</code>, <code>update</code> etc. i am also curious how to replace the default <code>dict</code> in CPython with my own implementation?</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://en.wikipedia.org/wiki/Hash_table" target="_blank" rel="noopener">Hash table</a><br><a href="https://www.laurentluce.com/posts/python-dictionary-implementation/" target="_blank" rel="noopener">Python dictionary implementation</a><br><a href="https://github.com/python/cpython/blob/master/Objects/dictobject.c" target="_blank" rel="noopener">CPython dictobject.c</a><br><a href="https://old-panda.com/2018/12/16/python-magic-methods/" target="_blank" rel="noopener">Python magic methods</a>  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python have builtin implementation for &lt;code&gt;dict&lt;/code&gt;, which is used to store key-value and also provided other related operations. Due to it is an frequenctly used basic data type, here I will use pure Python implement an &lt;code&gt;dict&lt;/code&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Dict" scheme="http://yoursite.com/tags/Dict/"/>
    
  </entry>
  
  <entry>
    <title>Gevent: patch it and pray</title>
    <link href="http://yoursite.com/2020/04/16/Gevent-patch-it-and-pray/"/>
    <id>http://yoursite.com/2020/04/16/Gevent-patch-it-and-pray/</id>
    <published>2020-04-16T09:42:36.000Z</published>
    <updated>2020-09-23T17:55:12.026Z</updated>
    
    <content type="html"><![CDATA[<p>To speedup the IO related operations in our project, we use Gevent and patch_all in Django. but it also makes project more complicated, especially when a new maintainer trying to figure out how the multi-threading process works without knowing the patch. So Guido van Rossum once said: when you use gevent in your project, once after patch, god knows what will happen later. i.e Patch it and Pray!!! and also for other reasons, this way isn’t a Pythonic way. here in this post, let’s see how it works, why it is bad.</p><a id="more"></a><h3 id="What’s-monkey-patch"><a href="#What’s-monkey-patch" class="headerlink" title="What’s monkey patch"></a>What’s monkey patch</h3><p>In Python, monkey patch is simply the dynamic replacement of attributes at runtime. for instance, consider a class that has a method <code>get_data</code>. this method does an external lookup(on a database or web api, for example), and vrious other methods in the class call it. However, in a unit test, you don’t want to depend on the external data source - so you dynamically replace the <code>get_data</code> method with a stub that returns fixed data.  </p><p>Becuase Python classes are mutable, and methods are just attributes of the class, you can do this as much as you like - and, in fact, you can even replace classes and functions in a module in exactly the same way. here is the example of Patch in Python, when in test/dev env, it will use <code>DataManagerPatcher.get_data</code> which will return mock data.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataManager</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_data</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        get data from http api</span></span><br><span class="line"><span class="string">        :return: str</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        resp = requests.get(<span class="string">'https://google.com'</span>)</span><br><span class="line">        <span class="keyword">return</span> resp.content</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataManagerPatcher</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_data</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        get data mock</span></span><br><span class="line"><span class="string">        :return: str</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;html&gt;&lt;/html&gt;'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">patch</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        path the get_data with mock method</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        DataManager.get_data = cls.get_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># if test/dev env, need use mock data</span></span><br><span class="line">    <span class="keyword">if</span> os.get(<span class="string">'env'</span>) <span class="keyword">in</span> [<span class="string">'DEV'</span>, <span class="string">'TEST'</span>]:</span><br><span class="line">        DataManagerPatcher.patch()</span><br><span class="line"></span><br><span class="line">    DataManager.get_data()</span><br></pre></td></tr></table></figure><p>But why monkey patch can work in Python like this? it is NameSpace. In python both attributes and methods are called attributes, they have name bind to object. and Python use namespaces to implement this scoping. it is a dict like data structure with each name as key and object as value. when you access an attribute, Python VM will lookup the namespace and call the corresponding object. if no name found, you got a <code>NameError</code> exception. also it following LEGB rules, which is :</p><p><img src="https://blog.confirm.ch/wp-content/uploads/2017/08/python_namespaces_legb.jpg" alt="LEGB">  </p><p>So, patch is achived by replace the name-object binding in current process’s namespace. but use caution when monkey patching due to following reasons:  </p><ul><li>if anything else besides your test logic calls <code>get_data</code> as well, it will also call your monkey-patched replacement rather than the original – which can be good or bad, just beware.</li><li>if some variable or attribute exists that also points to the <code>get_data</code> function by the time you replace it, this alias will not change its meaning and will continue to point to the original <code>get_data</code>. (Python already have that binding)</li></ul><h3 id="How-Gevent-work"><a href="#How-Gevent-work" class="headerlink" title="How Gevent work"></a>How Gevent work</h3><p>Gevent is a co-routine based Python networking library that uses greenlet to provide a high level synchronous API on top of the libev or libuv event loop which implements asynchronous I/O model. basicly, it use eventloop schedule co-routines, and co-routine will replase control when entring I/O to event loop. for more detail, here i recommend<br>Kavya’s <a href="https://www.youtube.com/watch?v=GunMToxbE0E&t=1536s" target="_blank" rel="noopener">A deep dive into how gevent works</a>.  </p><p>And with monkey-patching, gevent can replace the corresponding 3rd party lib method. your request eventually gose to Gevent’s corresonding method.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey; monkey.patch_all()</span><br><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(url)</span>:</span></span><br><span class="line">    print(<span class="string">'GET: %s'</span> % url)</span><br><span class="line">    resp = urllib2.urlopen(url)</span><br><span class="line">    data = resp.read()</span><br><span class="line">    print(<span class="string">'%d bytes received from %s.'</span> % (len(data), url))</span><br><span class="line"></span><br><span class="line">gevent.joinall([</span><br><span class="line">        gevent.spawn(f, <span class="string">'https://www.python.org/'</span>),</span><br><span class="line">        gevent.spawn(f, <span class="string">'https://www.yahoo.com/'</span>),</span><br><span class="line">        gevent.spawn(f, <span class="string">'https://github.com/'</span>),</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h3 id="The-bad"><a href="#The-bad" class="headerlink" title="The bad"></a>The bad</h3><p>Why it is bad? for following reasons:</p><ul><li>Python3 already support asynchronous I/O model, you should use it instead of 3rd party lib: Gevent</li><li>Gevent only works on CPython, not support other Python intepreter like PyPy or Jthon…</li><li>Dynamic replace change the binding between name-object is a bad idea, it will confuse other people<br>it validates <em>The Zen of Python</em>:</li><li>Explicit is better than implicit</li><li>If the implementation is hard to explain, it’s a bad idea.</li></ul><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://www.youtube.com/watch?v=GunMToxbE0E&t=1536s" target="_blank" rel="noopener">A deep dive into how gevent works</a><br><a href="https://zpzhou.com/archives/monkey_patch.html" target="_blank" rel="noopener">Monkey patch 解惑</a><br><a href="https://blog.confirm.ch/python-namespaces/" target="_blank" rel="noopener">Python namespaces</a><br><a href="http://www.gevent.org/" target="_blank" rel="noopener">gevent.org</a>  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;To speedup the IO related operations in our project, we use Gevent and patch_all in Django. but it also makes project more complicated, especially when a new maintainer trying to figure out how the multi-threading process works without knowing the patch. So Guido van Rossum once said: when you use gevent in your project, once after patch, god knows what will happen later. i.e Patch it and Pray!!! and also for other reasons, this way isn’t a Pythonic way. here in this post, let’s see how it works, why it is bad.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Gevent" scheme="http://yoursite.com/tags/Gevent/"/>
    
      <category term="Patch" scheme="http://yoursite.com/tags/Patch/"/>
    
  </entry>
  
  <entry>
    <title>Gunicorn, an inside view of it</title>
    <link href="http://yoursite.com/2020/04/10/Gunicorn-an-inside-view-of-it/"/>
    <id>http://yoursite.com/2020/04/10/Gunicorn-an-inside-view-of-it/</id>
    <published>2020-04-09T23:13:00.000Z</published>
    <updated>2020-09-23T17:55:12.026Z</updated>
    
    <content type="html"><![CDATA[<p>Gunicorn 是一个Python Web Server实现，兼容WSGI协议。其迁移自Ruby世界的Unicorn。在我们的生产环境中，有大量使用Gunicorn作为Web 服务器，所以本文分析Gunicorn的相关几个问题： Server model，Async worker.</p><a id="more"></a><h3 id="Server-model"><a href="#Server-model" class="headerlink" title="Server model"></a>Server model</h3><p>如果你写过socket编程，应该知道socket server一般是如何支持并发的，比如在socket server启动后，会对每一个进来的请求fork一个新的进程或者线程去处理它。但是这种实现存在问题，比如高并发量情况下，socket server不得不创建很多进程或者线程，创建进程或者线程需要sys call，大量的创建或者销毁会使系统负载过高，进而处理请求能力下降。极限情况是可以创建的进程线程数量会达到OS的limit进而程序崩溃，或者大量的进程线程之间切换耗费太多资源（我们知道OS 进程管理器在做switch操作的时候，需要保存当前进程的状态到内存数据结构中，然后将ready的进程相关资源load进入相关处理器）。  </p><p>一种改进的方案是池化复用。创建固定数量的进程或者线程，所有并发进来的请求都轮流使用池子中的进程线程处理。这种情况下，进程线程只会创建一次，后续会被请求复用，在整个服务器生命周期的最后阶段才会被销毁。这种优化思想在工程中的很多地方都有使用，比如Web app到数据库会有一个连接池，Django celery模型中会使用消息队列池化待处理的任务等等。</p><p>如果大部分请求处理涉及IO，那么更加优化的方案是通过OS提供的IO复用机制（select/poll/epoll）来处理。在一个服务主循环中，IO multiplexing会返回当前可读可写的socket，这样就可以直接使用对应handler处理方法处理read、write ready的socket。这种方式的优点是单进程即可支持很高的并发量，且没有进程创建销毁等操作，资源占用率比较低。但是它一定是处理IO bound task才会有这种优势。</p><p>Gunicorn 采用的是池化复用的技巧，通过服务启动时候，根据你的配置信息，由master进程提前创建好对应的worker进程，然后后续的请求都会通过轮流复用被这些worker进程处理。从单个sync worker进程的视角来看，在某一个时刻，其只能处理一个请求，其它请求要么被其它worker处理中，要么在socket队列pending中。下面是一张其逻辑视图：</p><p><img src="https://www.spirulasystems.com/wp-content/plugins/phastpress/phast.php?service=images&width=512&height=290&src=https%3A%2F%2Fwww.spirulasystems.com%2Fwp-content%2Fuploads%2F2015%2F01%2Fsync_worker_type1.png&cacheMarker=1557312233-22541&token=a271e359b84a7e6c" alt="sync worker"></p><p>总体上，master进程负责启动worker进程并对其管理，包括创建、销毁、新增、减少等操作。worker进程负责监听端口处理请求，其创建启动的时候，会实例化配置好的Python Web application，将接受的http 请求parse，然后调用web application处理，得到返回结果后整理成Http Response通过tcp返回给客户端。如下图：</p><p><img src="https://circus.readthedocs.org/en/0.5/_images/classical-stack.png" alt="master-worker">  </p><h4 id="source-code-analysis"><a href="#source-code-analysis" class="headerlink" title="source code analysis"></a>source code analysis</h4><p>The following code in Gunicorn show it show to start master and workers process. when you type following command in bash: <code>gunicorn -w 4 myapp:app</code>, gunicorn will enter <code>Arbiter.run</code> method, it first start the master by initialize <code>arbiter</code> class instance, like set pid and create socket. it then will create worker process with <code>Arbiter.spawn_worker</code> method, actually use os.fork to create or clone an child process. also in <code>Arbiter.manage_workers</code> you can see how master process manages worker process.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Arbiter</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Arbiter maintain the workers processes alive. It launches or</span></span><br><span class="line"><span class="string">    kills them if needed. It also manages application reloading</span></span><br><span class="line"><span class="string">    via SIGHUP/USR2.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"Main master loop."</span></span><br><span class="line">        self.start()</span><br><span class="line">        util._setproctitle(<span class="string">"master [%s]"</span> % self.proc_name)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.manage_workers()</span><br><span class="line"></span><br><span class="line">            ...</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            self.log.info(<span class="string">"Unhandled exception in main loop"</span>,</span><br><span class="line">                          exc_info=<span class="literal">True</span>)</span><br><span class="line">            self.stop(<span class="literal">False</span>)</span><br><span class="line">            <span class="keyword">if</span> self.pidfile <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                self.pidfile.unlink()</span><br><span class="line">            sys.exit(<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""\</span></span><br><span class="line"><span class="string">        Initialize the arbiter. Start listening and set pidfile if needed.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        self.init_signals()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.LISTENERS:</span><br><span class="line">            fds = <span class="literal">None</span></span><br><span class="line">            listen_fds = systemd.listen_fds()</span><br><span class="line">            <span class="keyword">if</span> listen_fds:</span><br><span class="line">                self.systemd = <span class="literal">True</span></span><br><span class="line">                fds = range(systemd.SD_LISTEN_FDS_START,</span><br><span class="line">                            systemd.SD_LISTEN_FDS_START + listen_fds)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> self.master_pid:</span><br><span class="line">                fds = []</span><br><span class="line">                <span class="keyword">for</span> fd <span class="keyword">in</span> os.environ.pop(<span class="string">'GUNICORN_FD'</span>).split(<span class="string">','</span>):</span><br><span class="line">                    fds.append(int(fd))</span><br><span class="line"></span><br><span class="line">            self.LISTENERS = sock.create_sockets(self.cfg, self.log, fds)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">manage_workers</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""\</span></span><br><span class="line"><span class="string">        Maintain the number of workers by spawning or killing</span></span><br><span class="line"><span class="string">        as required.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> len(self.WORKERS) &lt; self.num_workers:</span><br><span class="line">            self.spawn_workers()</span><br><span class="line"></span><br><span class="line">        workers = self.WORKERS.items()</span><br><span class="line">        workers = sorted(workers, key=<span class="keyword">lambda</span> w: w[<span class="number">1</span>].age)</span><br><span class="line">        <span class="keyword">while</span> len(workers) &gt; self.num_workers:</span><br><span class="line">            (pid, _) = workers.pop(<span class="number">0</span>)</span><br><span class="line">            self.kill_worker(pid, signal.SIGTERM)</span><br><span class="line"></span><br><span class="line">        active_worker_count = len(workers)</span><br><span class="line">        <span class="keyword">if</span> self._last_logged_active_worker_count != active_worker_count:</span><br><span class="line">            self._last_logged_active_worker_count = active_worker_count</span><br><span class="line">            self.log.debug(<span class="string">"&#123;0&#125; workers"</span>.format(active_worker_count),</span><br><span class="line">                           extra=&#123;<span class="string">"metric"</span>: <span class="string">"gunicorn.workers"</span>,</span><br><span class="line">                                  <span class="string">"value"</span>: active_worker_count,</span><br><span class="line">                                  <span class="string">"mtype"</span>: <span class="string">"gauge"</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spawn_worker</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.worker_age += <span class="number">1</span></span><br><span class="line">        worker = self.worker_class(self.worker_age, self.pid, self.LISTENERS,</span><br><span class="line">                                   self.app, self.timeout / <span class="number">2.0</span>,</span><br><span class="line">                                   self.cfg, self.log)</span><br><span class="line">        self.cfg.pre_fork(self, worker)</span><br><span class="line">        pid = os.fork()</span><br><span class="line">        <span class="keyword">if</span> pid != <span class="number">0</span>:</span><br><span class="line">            worker.pid = pid</span><br><span class="line">            self.WORKERS[pid] = worker</span><br><span class="line">            <span class="keyword">return</span> pid</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Do not inherit the temporary files of other workers</span></span><br><span class="line">        <span class="keyword">for</span> sibling <span class="keyword">in</span> self.WORKERS.values():</span><br><span class="line">            sibling.tmp.close()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Process Child</span></span><br><span class="line">        worker.pid = os.getpid()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            util._setproctitle(<span class="string">"worker [%s]"</span> % self.proc_name)</span><br><span class="line">            self.log.info(<span class="string">"Booting worker with pid: %s"</span>, worker.pid)</span><br><span class="line">            self.cfg.post_fork(self, worker)</span><br><span class="line">            worker.init_process()</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">except</span> SystemExit:</span><br><span class="line">            <span class="keyword">raise</span></span><br><span class="line">        <span class="keyword">except</span> AppImportError <span class="keyword">as</span> e:</span><br><span class="line">            self.log.debug(<span class="string">"Exception while loading the application"</span>,</span><br><span class="line">                           exc_info=<span class="literal">True</span>)</span><br><span class="line">            print(<span class="string">"%s"</span> % e, file=sys.stderr)</span><br><span class="line">            sys.stderr.flush()</span><br><span class="line">            sys.exit(self.APP_LOAD_ERROR)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            self.log.exception(<span class="string">"Exception in worker process"</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> worker.booted:</span><br><span class="line">                sys.exit(self.WORKER_BOOT_ERROR)</span><br><span class="line">            sys.exit(<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            self.log.info(<span class="string">"Worker exiting (pid: %s)"</span>, worker.pid)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                worker.tmp.close()</span><br><span class="line">                self.cfg.worker_exit(self, worker)</span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                self.log.warning(<span class="string">"Exception during worker exit:\n%s"</span>,</span><br><span class="line">                                 traceback.format_exc())</span><br></pre></td></tr></table></figure><h3 id="Async-worker-type"><a href="#Async-worker-type" class="headerlink" title="Async worker type"></a>Async worker type</h3><p>Gunicorn支持多种worker type，例如Sync，Async，Tonardo，AsyncIO类型的worker。Sync的worker最简单，在上节已经阐述。  </p><p>Async worker是通过Gevent or Eventlet实现，Gevent &amp; Eventlet都是通过Greenlet实现， Greenlet是Python的一个C extension module，其本质是C的co-routine。总体上来说Gevent就是通过co-rotine + 事件循环（libev）实现了异步模型。如果对这里的实现特别感兴趣，推荐看David beezly的<a href="https://www.youtube.com/watch?v=Z_OAlIhXziw" target="_blank" rel="noopener">curious course on corontines and concurrency</a> and Kavya Joshi的  <a href="https://www.youtube.com/watch?v=GunMToxbE0E" target="_blank" rel="noopener">a deep dive into how gevent works</a> </p><p>Async模式下Gunicorn处理请求的流程图如下：</p><p><img src="https://www.spirulasystems.com/wp-content/plugins/phastpress/phast.php?service=images&width=275&height=300&src=https%3A%2F%2Fwww.spirulasystems.com%2Fwp-content%2Fuploads%2F2015%2F01%2Fsync_worker_type2-275x300.png&cacheMarker=1557312233-55428&token=c96103d27e004eef" alt="async worker"><br>一个async worker可以并发的处理很多个请求，每个请求实际上被一个coroutine处理，当其进入IO等待，会主动yield出控制权，这样下一个coroutine就可以执行。当IO ready，会触发事件，事件循环会将对应的coroutine的从yeild出控制权的地方恢复执行。  </p><p>Async worker的corotines会运行在一个进程中，通过来回切换函数来充分利用CPU，减少IO等待时间，其在某个时刻只会有一个routine在cpu上运行。相比于进程线程，coroutine更加轻量，因为其操作的维度是函数而不是整个进程线程。</p><p>Gunicorn have an base worker type for every support worker, that is <code>base.Wrorker</code>, from the def of it, you can see child worker must implement <code>run init_process</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># base.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, age, ppid, sockets, app, timeout, cfg, log)</span>:</span></span><br><span class="line">        <span class="string">""" called in pre-fork """</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">notify</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" inform master process that this worker is alive """</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""\</span></span><br><span class="line"><span class="string">        This is the mainloop of a worker process. You should override</span></span><br><span class="line"><span class="string">        this method in a subclass to provide the intended behaviour</span></span><br><span class="line"><span class="string">        for your particular evil schemes.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_process</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""\</span></span><br><span class="line"><span class="string">        If you override this method in a subclass, the last statement</span></span><br><span class="line"><span class="string">        in the function should be to call this method with</span></span><br><span class="line"><span class="string">        super().init_process() so that the ``run()`` loop is initiated.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        ...</span><br><span class="line">        self.wait_fds = self.sockets + [self.PIPE[<span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line">        self.log.close_on_exec()</span><br><span class="line"></span><br><span class="line">        self.init_signals()</span><br><span class="line"></span><br><span class="line">        self.load_wsgi()</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment"># Enter main run loop</span></span><br><span class="line">        self.booted = <span class="literal">True</span></span><br><span class="line">        self.run()</span><br></pre></td></tr></table></figure><p>but for async worker, it will have second parent base type which is <code>base_async.AsyncWorker</code>, which is inherit from <code>base.Worker</code>.<br>it maily defs how to process or handle the request. also Gunicorn have the corresponding SyncWorker defined in <code>sync.py</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># base_async.py</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AsyncWorker</span><span class="params">(base.Worker)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self, listener, client, addr)</span>:</span></span><br><span class="line">        req = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            parser = http.RequestParser(self.cfg, client)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                listener_name = listener.getsockname()</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> self.cfg.keepalive:</span><br><span class="line">                    req = next(parser)</span><br><span class="line">                    self.handle_request(listener_name, req, client, addr)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_request</span><span class="params">(self, listener_name, req, sock, addr)</span>:</span></span><br><span class="line">        request_start = datetime.now()</span><br><span class="line">        environ = &#123;&#125;</span><br><span class="line">        resp = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.cfg.pre_request(self, req)</span><br><span class="line">            resp, environ = wsgi.create(req, sock, addr,</span><br><span class="line">                                        listener_name, self.cfg)</span><br><span class="line">            environ[<span class="string">"wsgi.multithread"</span>] = <span class="literal">True</span></span><br><span class="line">            ...</span><br></pre></td></tr></table></figure><p>Gevent worker implementation is defined in <code>ggevent.py</code>, which will implement following methods: <code>run</code>, <code>init_process</code>, <code>notify</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ggevent.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GeventWorker</span><span class="params">(AsyncWorker)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">notify</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().notify()</span><br><span class="line">        <span class="keyword">if</span> self.ppid != os.getppid():</span><br><span class="line">            self.log.info(<span class="string">"Parent changed, shutting down: %s"</span>, self)</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_process</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.patch()</span><br><span class="line">        hub.reinit()</span><br><span class="line">        super().init_process()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        servers = []</span><br><span class="line">        ssl_args = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.cfg.is_ssl:</span><br><span class="line">            ssl_args = dict(server_side=<span class="literal">True</span>, **self.cfg.ssl_options)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> self.sockets:</span><br><span class="line">            s.setblocking(<span class="number">1</span>)</span><br><span class="line">            pool = Pool(self.worker_connections)</span><br><span class="line">            <span class="keyword">if</span> self.server_class <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                environ = base_environ(self.cfg)</span><br><span class="line">                environ.update(&#123;</span><br><span class="line">                    <span class="string">"wsgi.multithread"</span>: <span class="literal">True</span>,</span><br><span class="line">                    <span class="string">"SERVER_SOFTWARE"</span>: VERSION,</span><br><span class="line">                &#125;)</span><br><span class="line">                server = self.server_class(</span><br><span class="line">                    s, application=self.wsgi, spawn=pool, log=self.log,</span><br><span class="line">                    handler_class=self.wsgi_handler, environ=environ,</span><br><span class="line">                    **ssl_args)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                hfun = partial(self.handle, s)</span><br><span class="line">                server = StreamServer(s, handle=hfun, spawn=pool, **ssl_args)</span><br><span class="line">                <span class="keyword">if</span> self.cfg.workers &gt; <span class="number">1</span>:</span><br><span class="line">                    server.max_accept = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            server.start()</span><br><span class="line">            servers.append(server)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> self.alive:</span><br><span class="line">            self.notify()</span><br><span class="line">            gevent.sleep(<span class="number">1.0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># Stop accepting requests</span></span><br><span class="line">            <span class="keyword">for</span> server <span class="keyword">in</span> servers:</span><br><span class="line">                <span class="keyword">if</span> hasattr(server, <span class="string">'close'</span>):  <span class="comment"># gevent 1.0</span></span><br><span class="line">                    server.close()</span><br><span class="line">                <span class="keyword">if</span> hasattr(server, <span class="string">'kill'</span>):  <span class="comment"># gevent &lt; 1.0</span></span><br><span class="line">                    server.kill()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Handle current requests until graceful_timeout</span></span><br><span class="line">            ts = time.time()</span><br><span class="line">            <span class="keyword">while</span> time.time() - ts &lt;= self.cfg.graceful_timeout:</span><br><span class="line">                accepting = <span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> server <span class="keyword">in</span> servers:</span><br><span class="line">                    <span class="keyword">if</span> server.pool.free_count() != server.pool.size:</span><br><span class="line">                        accepting += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># if no server is accepting a connection, we can exit</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> accepting:</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">                self.notify()</span><br><span class="line">                gevent.sleep(<span class="number">1.0</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Force kill all active the handlers</span></span><br><span class="line">            self.log.warning(<span class="string">"Worker graceful timeout (pid:%s)"</span> % self.pid)</span><br><span class="line">            <span class="keyword">for</span> server <span class="keyword">in</span> servers:</span><br><span class="line">                server.stop(timeout=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>一般来说我们的web application要query db，从第三方api拉取数据等，所以很大概率上这是一个IO bound的task，这就比较适合用Gunicorn的Async worker（gevent）来处理。如果你的服务是一个CPU bound的task，那么用Gunicorn的Sync task就会达到很好的性能。</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://www.youtube.com/watch?v=GunMToxbE0E" target="_blank" rel="noopener">A deep dive into how gevent works</a><br><a href="https://www.spirulasystems.com/blog/2015/01/20/gunicorn-worker-types/" target="_blank" rel="noopener">Gunicorn worker types</a><br><a href="https://words.volant.is/articles/understanding-gunicorns-async-worker-concurrency-model/" target="_blank" rel="noopener">Understand Gunicorn’s async worker models</a><br><a href="https://github.com/benoitc/gunicorn" target="_blank" rel="noopener">benoitc/gunicorn</a><br><a href="https://docs.gunicorn.org/en/stable/design.html" target="_blank" rel="noopener">Gunicorn Design</a><br><a href="https://www.youtube.com/watch?v=Z_OAlIhXziw" target="_blank" rel="noopener">Curious course on corontines and concurrency</a>  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Gunicorn 是一个Python Web Server实现，兼容WSGI协议。其迁移自Ruby世界的Unicorn。在我们的生产环境中，有大量使用Gunicorn作为Web 服务器，所以本文分析Gunicorn的相关几个问题： Server model，Async worker.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Web Server" scheme="http://yoursite.com/tags/Web-Server/"/>
    
      <category term="Gunicorn" scheme="http://yoursite.com/tags/Gunicorn/"/>
    
  </entry>
  
  <entry>
    <title>Let&#39;s build a WSGI server</title>
    <link href="http://yoursite.com/2020/03/22/Let-s-build-a-WSGI-server/"/>
    <id>http://yoursite.com/2020/03/22/Let-s-build-a-WSGI-server/</id>
    <published>2020-03-22T11:58:34.000Z</published>
    <updated>2020-09-23T17:55:12.026Z</updated>
    
    <content type="html"><![CDATA[<p>Let’s build a wsgi server ground up with sockets, multi-processing or Select/Poll/Epoll. to achive this, you need familiar with Python’s socket programming, Python’s cucurreny model, Linux Non-blocking I/O.</p><a id="more"></a><p>WSGI(web server gateway interface) is a protocol in Python web programming, it defines how web application and web server communicate. with this protocol, you can chose various combinations about web servers and web frameworks which are wsgi-compatiable. for example, you can use Gunicorn + Django, or even Bjoern + Flask etc…</p><h3 id="What’s-WSGI-Server"><a href="#What’s-WSGI-Server" class="headerlink" title="What’s WSGI Server"></a>What’s WSGI Server</h3><p>WSGI server is the server side wsgi protocol implementation. which is responsible accepting connections and invoke web application to process the result though wsgi protocol, and finally return the result back to clients. with wsgi server concentrate on accepting connections, wsgi framework(application) can focus on your bussiness logic.   </p><p>To summarize, as an wsgi server, it must contains following info:</p><ul><li><p>compose <code>env</code> variables which will be used in web framework</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">environ[<span class="string">'wsgi.input'</span>]        = sys.stdin</span><br><span class="line">environ[<span class="string">'wsgi.errors'</span>]       = sys.stderr</span><br><span class="line">environ[<span class="string">'wsgi.version'</span>]      = (<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">environ[<span class="string">'wsgi.multithread'</span>]  = <span class="literal">False</span></span><br><span class="line">environ[<span class="string">'wsgi.multiprocess'</span>] = <span class="literal">True</span></span><br><span class="line">environ[<span class="string">'wsgi.run_once'</span>]     = <span class="literal">True</span></span><br><span class="line">environ[<span class="string">'wsgi.url_schema'</span>]   = <span class="string">'http'</span></span><br><span class="line">environ[<span class="string">'REQUEST_METHOD'</span>]    = <span class="string">'GET'</span></span><br><span class="line">environ[<span class="string">'PATH_INFO'</span>]         = <span class="string">'/hello'</span></span><br><span class="line">environ[<span class="string">'SERVER_NAME'</span>]       = <span class="string">'localhost'</span></span><br><span class="line">environ[<span class="string">'SERVER_PORT'</span>]       = <span class="number">8888</span></span><br></pre></td></tr></table></figure></li><li><p>start_response callable which will be called in web framework</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_response</span><span class="params">(status, response_header, exec_info=None)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    status is the http status code, response_header is the header web framework wants to added</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li></ul><p>for more detail, please reference: <a href="https://www.python.org/dev/peps/pep-0333/#implementation-application-notes" target="_blank" rel="noopener">PEP 333: Python web server gateway interfaces v1.0</a></p><h3 id="Simple-TCP-echo-server"><a href="#Simple-TCP-echo-server" class="headerlink" title="Simple TCP echo server"></a>Simple TCP echo server</h3><p>As classic socket programming said, a socket server needs to bind/listen/accept/recv/send/close, a socket client needs to connect/send/recv/close. here is a simple example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleTcpServer</span><span class="params">(object)</span>:</span></span><br><span class="line">    address_family = socket.AF_INET</span><br><span class="line">    socket_type = socket.SOCK_STREAM</span><br><span class="line">    request_queue_size = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init</span><span class="params">(self, server_address)</span>:</span></span><br><span class="line">        <span class="comment"># Create a listening socket</span></span><br><span class="line">        self.listen_socket = listen_socket = socket.socket(</span><br><span class="line">            self.address_family,</span><br><span class="line">            self.socket_type</span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># Allow to reuse the same address</span></span><br><span class="line">        listen_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># Bind</span></span><br><span class="line">        listen_socket.bind(server_address)</span><br><span class="line">        <span class="comment"># Activate</span></span><br><span class="line">        listen_socket.listen(self.request_queue_size)</span><br><span class="line">        <span class="comment"># Get server host name and port</span></span><br><span class="line">        host, port = self.listen_socket.getsockname()[:<span class="number">2</span>]</span><br><span class="line">        self.server_name = socket.getfqdn(host)</span><br><span class="line">        self.server_port = port</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">server_forever</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            self.client_connection, client_address = self.listen_socket.accept()</span><br><span class="line">            self.handle_one_request()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_one_request</span><span class="params">(self)</span>:</span></span><br><span class="line">        request_data = self.client_connection.recv(<span class="number">1024</span>)</span><br><span class="line">        self.client_connection.sendall(request_data)</span><br><span class="line">        self.client_connection.close()</span><br></pre></td></tr></table></figure><h3 id="A-simple-wsgi-server"><a href="#A-simple-wsgi-server" class="headerlink" title="A simple wsgi server"></a>A simple wsgi server</h3><p>The simple wsgi server will listen on port, waitting for incoming connection to accept, for each connection, wsgi server will invoke web framework process(which is the main entrance implemented in web framework) the request and wait until web framework finish processing it and return the result to client. here is a simple example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WSGIServer</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    address_family = socket.AF_INET</span><br><span class="line">    socket_type = socket.SOCK_STREAM</span><br><span class="line">    request_queue_size = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, server_address)</span>:</span></span><br><span class="line">        <span class="comment"># Create a listening socket</span></span><br><span class="line">        self.listen_socket = listen_socket = socket.socket(</span><br><span class="line">            self.address_family,</span><br><span class="line">            self.socket_type</span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># Allow to reuse the same address</span></span><br><span class="line">        listen_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># Bind</span></span><br><span class="line">        listen_socket.bind(server_address)</span><br><span class="line">        <span class="comment"># Activate</span></span><br><span class="line">        listen_socket.listen(self.request_queue_size)</span><br><span class="line">        <span class="comment"># Get server host name and port</span></span><br><span class="line">        host, port = self.listen_socket.getsockname()[:<span class="number">2</span>]</span><br><span class="line">        self.server_name = socket.getfqdn(host)</span><br><span class="line">        self.server_port = port</span><br><span class="line">        <span class="comment"># Return headers set by Web framework/Web application</span></span><br><span class="line">        self.headers_set = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_app</span><span class="params">(self, application)</span>:</span></span><br><span class="line">        self.application = application</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serve_forever</span><span class="params">(self)</span>:</span></span><br><span class="line">        listen_socket = self.listen_socket</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># New client connection</span></span><br><span class="line">            self.client_connection, client_address = listen_socket.accept()</span><br><span class="line">            <span class="comment"># Handle one request and close the client connection. Then</span></span><br><span class="line">            <span class="comment"># loop over to wait for another client connection</span></span><br><span class="line">            self.handle_one_request()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_one_request</span><span class="params">(self)</span>:</span></span><br><span class="line">        request_data = self.client_connection.recv(<span class="number">1024</span>)</span><br><span class="line">        self.request_data = request_data = request_data.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">        <span class="comment"># Print formatted request data a la 'curl -v'</span></span><br><span class="line">        print(<span class="string">''</span>.join(</span><br><span class="line">            <span class="string">f'&lt; <span class="subst">&#123;line&#125;</span>\n'</span> <span class="keyword">for</span> line <span class="keyword">in</span> request_data.splitlines()</span><br><span class="line">        ))</span><br><span class="line"></span><br><span class="line">        self.parse_request(request_data)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Construct environment dictionary using request data</span></span><br><span class="line">        env = self.get_environ()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># It's time to call our application callable and get</span></span><br><span class="line">        <span class="comment"># back a result that will become HTTP response body</span></span><br><span class="line">        result = self.application(env, self.start_response)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Construct a response and send it back to the client</span></span><br><span class="line">        self.finish_response(result)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_request</span><span class="params">(self, text)</span>:</span></span><br><span class="line">        request_line = text.splitlines()[<span class="number">0</span>]</span><br><span class="line">        request_line = request_line.rstrip(<span class="string">'\r\n'</span>)</span><br><span class="line">        <span class="comment"># Break down the request line into components</span></span><br><span class="line">        (self.request_method,  <span class="comment"># GET</span></span><br><span class="line">         self.path,            <span class="comment"># /hello</span></span><br><span class="line">         self.request_version  <span class="comment"># HTTP/1.1</span></span><br><span class="line">         ) = request_line.split()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_environ</span><span class="params">(self)</span>:</span></span><br><span class="line">        env = &#123;&#125;</span><br><span class="line">        <span class="comment"># The following code snippet does not follow PEP8 conventions</span></span><br><span class="line">        <span class="comment"># but it's formatted the way it is for demonstration purposes</span></span><br><span class="line">        <span class="comment"># to emphasize the required variables and their values</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># Required WSGI variables</span></span><br><span class="line">        env[<span class="string">'wsgi.version'</span>]      = (<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">        env[<span class="string">'wsgi.url_scheme'</span>]   = <span class="string">'http'</span></span><br><span class="line">        env[<span class="string">'wsgi.input'</span>]        = io.StringIO(self.request_data)</span><br><span class="line">        env[<span class="string">'wsgi.errors'</span>]       = sys.stderr</span><br><span class="line">        env[<span class="string">'wsgi.multithread'</span>]  = <span class="literal">False</span></span><br><span class="line">        env[<span class="string">'wsgi.multiprocess'</span>] = <span class="literal">False</span></span><br><span class="line">        env[<span class="string">'wsgi.run_once'</span>]     = <span class="literal">False</span></span><br><span class="line">        <span class="comment"># Required CGI variables</span></span><br><span class="line">        env[<span class="string">'REQUEST_METHOD'</span>]    = self.request_method    <span class="comment"># GET</span></span><br><span class="line">        env[<span class="string">'PATH_INFO'</span>]         = self.path              <span class="comment"># /hello</span></span><br><span class="line">        env[<span class="string">'SERVER_NAME'</span>]       = self.server_name       <span class="comment"># localhost</span></span><br><span class="line">        env[<span class="string">'SERVER_PORT'</span>]       = str(self.server_port)  <span class="comment"># 8888</span></span><br><span class="line">        <span class="keyword">return</span> env</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_response</span><span class="params">(self, status, response_headers, exc_info=None)</span>:</span></span><br><span class="line">        <span class="comment"># Add necessary server headers</span></span><br><span class="line">        server_headers = [</span><br><span class="line">            (<span class="string">'Date'</span>, <span class="string">'Mon, 15 Jul 2019 5:54:48 GMT'</span>),</span><br><span class="line">            (<span class="string">'Server'</span>, <span class="string">'WSGIServer 0.2'</span>),</span><br><span class="line">        ]</span><br><span class="line">        self.headers_set = [status, response_headers + server_headers]</span><br><span class="line">        <span class="comment"># To adhere to WSGI specification the start_response must return</span></span><br><span class="line">        <span class="comment"># a 'write' callable. We simplicity's sake we'll ignore that detail</span></span><br><span class="line">        <span class="comment"># for now.</span></span><br><span class="line">        <span class="comment"># return self.finish_response</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">finish_response</span><span class="params">(self, result)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            status, response_headers = self.headers_set</span><br><span class="line">            response = <span class="string">f'HTTP/1.1 <span class="subst">&#123;status&#125;</span>\r\n'</span></span><br><span class="line">            <span class="keyword">for</span> header <span class="keyword">in</span> response_headers:</span><br><span class="line">                response += <span class="string">'&#123;0&#125;: &#123;1&#125;\r\n'</span>.format(*header)</span><br><span class="line">            response += <span class="string">'\r\n'</span></span><br><span class="line">            <span class="keyword">for</span> data <span class="keyword">in</span> result:</span><br><span class="line">                response += data.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">            <span class="comment"># Print formatted response data a la 'curl -v'</span></span><br><span class="line">            print(<span class="string">''</span>.join(</span><br><span class="line">                <span class="string">f'&gt; <span class="subst">&#123;line&#125;</span>\n'</span> <span class="keyword">for</span> line <span class="keyword">in</span> response.splitlines()</span><br><span class="line">            ))</span><br><span class="line">            response_bytes = response.encode()</span><br><span class="line">            self.client_connection.sendall(response_bytes)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            self.client_connection.close()</span><br></pre></td></tr></table></figure><h3 id="Concurrent-with-multi-processing"><a href="#Concurrent-with-multi-processing" class="headerlink" title="Concurrent with multi-processing"></a>Concurrent with multi-processing</h3><p>The upper wsgi server can process a request at a time, cuz it is a single process and will block in while loop, as following code shows:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">serve_forever</span><span class="params">(self)</span>:</span></span><br><span class="line">    listen_socket = self.listen_socket</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># New client connection</span></span><br><span class="line">        self.client_connection, client_address = listen_socket.accept()</span><br><span class="line">        <span class="comment"># Handle one request and close the client connection. Then</span></span><br><span class="line">        <span class="comment"># loop over to wait for another client connection</span></span><br><span class="line">        self.handle_one_request()</span><br></pre></td></tr></table></figure><p><code>handle_one_request</code> will block the while loop while processing the current connection. the time spend on blocking depends on your web application’s corresonding method’s processing speed.  </p><p>if the first connection didn’t finished, the second connection will be blocked by the first one. how can we let the wsgi server handle multiple connections at the same time? the answer is multi-processing.  </p><p>here is an example of multi-processing version, which will fork an new python process for each incoming connections.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WSGIServer</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    address_family = socket.AF_INET</span><br><span class="line">    socket_type = socket.SOCK_STREAM</span><br><span class="line">    request_queue_size = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, server_address)</span>:</span></span><br><span class="line">        <span class="comment"># Create a listening socket</span></span><br><span class="line">        self.listen_socket = listen_socket = socket.socket(</span><br><span class="line">            self.address_family,</span><br><span class="line">            self.socket_type</span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># Allow to reuse the same address</span></span><br><span class="line">        listen_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># Bind</span></span><br><span class="line">        listen_socket.bind(server_address)</span><br><span class="line">        <span class="comment"># Activate</span></span><br><span class="line">        listen_socket.listen(self.request_queue_size)</span><br><span class="line">        <span class="comment"># Get server host name and port</span></span><br><span class="line">        host, port = self.listen_socket.getsockname()[:<span class="number">2</span>]</span><br><span class="line">        self.server_name = socket.getfqdn(host)</span><br><span class="line">        self.server_port = port</span><br><span class="line">        <span class="comment"># Return headers set by Web framework/Web application</span></span><br><span class="line">        self.headers_set = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reap_children</span><span class="params">(selflili, signum, frame)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        collect zombie children</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># wait for all children, do not block</span></span><br><span class="line">                pid, status = os.waitpid(<span class="number">-1</span>, os.WNOHANG)</span><br><span class="line">                <span class="keyword">if</span> pid == <span class="number">0</span>:  <span class="comment"># no more zombies</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="comment"># usally this would be OSError exception</span></span><br><span class="line">                <span class="comment"># with errno attribute set to errno.ECHILD</span></span><br><span class="line">                <span class="comment"># which means there are no more children</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_app</span><span class="params">(self, application)</span>:</span></span><br><span class="line">        self.application = application</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serve_forever</span><span class="params">(self)</span>:</span></span><br><span class="line">        signal.signal(signal.SIGCHLD, self.__reap_children)</span><br><span class="line">        listen_socket = self.listen_socket</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># New client connection</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.client_connection, client_address = listen_socket.accept()</span><br><span class="line">            <span class="keyword">except</span> IOError <span class="keyword">as</span> e:</span><br><span class="line">                code, msg = e.args</span><br><span class="line">                <span class="keyword">if</span> code == errno.EINR:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">raise</span></span><br><span class="line">            pid = os.fork()</span><br><span class="line">            <span class="keyword">if</span> pid == <span class="number">0</span>:  <span class="comment"># child</span></span><br><span class="line">                self.listen_socket.close()</span><br><span class="line">                self.handle_one_request()</span><br><span class="line">                os._exit(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">else</span>:  <span class="comment"># parent</span></span><br><span class="line">                self.client_connection.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_one_request</span><span class="params">(self)</span>:</span></span><br><span class="line">        request_data = self.client_connection.recv(<span class="number">1024</span>)</span><br><span class="line">        self.request_data = request_data = request_data.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">        <span class="comment"># Print formatted request data a la 'curl -v'</span></span><br><span class="line">        print(<span class="string">''</span>.join(</span><br><span class="line">            <span class="string">f'&lt; <span class="subst">&#123;line&#125;</span>\n'</span> <span class="keyword">for</span> line <span class="keyword">in</span> request_data.splitlines()</span><br><span class="line">        ))</span><br><span class="line"></span><br><span class="line">        self.parse_request(request_data)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Construct environment dictionary using request data</span></span><br><span class="line">        env = self.get_environ()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># It's time to call our application callable and get</span></span><br><span class="line">        <span class="comment"># back a result that will become HTTP response body</span></span><br><span class="line">        result = self.application(env, self.start_response)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Construct a response and send it back to the client</span></span><br><span class="line">        self.finish_response(result)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_request</span><span class="params">(self, text)</span>:</span></span><br><span class="line">        request_line = text.splitlines()[<span class="number">0</span>]</span><br><span class="line">        request_line = request_line.rstrip(<span class="string">'\r\n'</span>)</span><br><span class="line">        <span class="comment"># Break down the request line into components</span></span><br><span class="line">        (self.request_method,  <span class="comment"># GET</span></span><br><span class="line">         self.path,            <span class="comment"># /hello</span></span><br><span class="line">         self.request_version  <span class="comment"># HTTP/1.1</span></span><br><span class="line">         ) = request_line.split()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_environ</span><span class="params">(self)</span>:</span></span><br><span class="line">        env = &#123;&#125;</span><br><span class="line">        <span class="comment"># The following code snippet does not follow PEP8 conventions</span></span><br><span class="line">        <span class="comment"># but it's formatted the way it is for demonstration purposes</span></span><br><span class="line">        <span class="comment"># to emphasize the required variables and their values</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># Required WSGI variables</span></span><br><span class="line">        env[<span class="string">'wsgi.version'</span>]      = (<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">        env[<span class="string">'wsgi.url_scheme'</span>]   = <span class="string">'http'</span></span><br><span class="line">        env[<span class="string">'wsgi.input'</span>]        = io.StringIO(self.request_data)</span><br><span class="line">        env[<span class="string">'wsgi.errors'</span>]       = sys.stderr</span><br><span class="line">        env[<span class="string">'wsgi.multithread'</span>]  = <span class="literal">False</span></span><br><span class="line">        env[<span class="string">'wsgi.multiprocess'</span>] = <span class="literal">False</span></span><br><span class="line">        env[<span class="string">'wsgi.run_once'</span>]     = <span class="literal">False</span></span><br><span class="line">        <span class="comment"># Required CGI variables</span></span><br><span class="line">        env[<span class="string">'REQUEST_METHOD'</span>]    = self.request_method    <span class="comment"># GET</span></span><br><span class="line">        env[<span class="string">'PATH_INFO'</span>]         = self.path              <span class="comment"># /hello</span></span><br><span class="line">        env[<span class="string">'SERVER_NAME'</span>]       = self.server_name       <span class="comment"># localhost</span></span><br><span class="line">        env[<span class="string">'SERVER_PORT'</span>]       = str(self.server_port)  <span class="comment"># 8888</span></span><br><span class="line">        <span class="keyword">return</span> env</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_response</span><span class="params">(self, status, response_headers, exc_info=None)</span>:</span></span><br><span class="line">        <span class="comment"># Add necessary server headers</span></span><br><span class="line">        server_headers = [</span><br><span class="line">            (<span class="string">'Date'</span>, <span class="string">'Mon, 15 Jul 2019 5:54:48 GMT'</span>),</span><br><span class="line">            (<span class="string">'Server'</span>, <span class="string">'WSGIServer 0.2'</span>),</span><br><span class="line">        ]</span><br><span class="line">        self.headers_set = [status, response_headers + server_headers]</span><br><span class="line">        <span class="comment"># To adhere to WSGI specification the start_response must return</span></span><br><span class="line">        <span class="comment"># a 'write' callable. We simplicity's sake we'll ignore that detail</span></span><br><span class="line">        <span class="comment"># for now.</span></span><br><span class="line">        <span class="comment"># return self.finish_response</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">finish_response</span><span class="params">(self, result)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            status, response_headers = self.headers_set</span><br><span class="line">            response = <span class="string">f'HTTP/1.1 <span class="subst">&#123;status&#125;</span>\r\n'</span></span><br><span class="line">            <span class="keyword">for</span> header <span class="keyword">in</span> response_headers:</span><br><span class="line">                response += <span class="string">'&#123;0&#125;: &#123;1&#125;\r\n'</span>.format(*header)</span><br><span class="line">            response += <span class="string">'\r\n'</span></span><br><span class="line">            <span class="keyword">for</span> data <span class="keyword">in</span> result:</span><br><span class="line">                response += data.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">            <span class="comment"># Print formatted response data a la 'curl -v'</span></span><br><span class="line">            print(<span class="string">''</span>.join(</span><br><span class="line">                <span class="string">f'&gt; <span class="subst">&#123;line&#125;</span>\n'</span> <span class="keyword">for</span> line <span class="keyword">in</span> response.splitlines()</span><br><span class="line">            ))</span><br><span class="line">            response_bytes = response.encode()</span><br><span class="line">            self.client_connection.sendall(response_bytes)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            self.client_connection.close()</span><br></pre></td></tr></table></figure><h3 id="Concurrent-with-Linux’s-Non-blocking-I-O"><a href="#Concurrent-with-Linux’s-Non-blocking-I-O" class="headerlink" title="Concurrent with Linux’s Non-blocking I/O"></a>Concurrent with Linux’s Non-blocking I/O</h3><p>The multi-processing version still have problems, like when there are massive connections, the server will create massive processes for each connection. this will exaust the server resources, and also process-switching is expensive. to achive that, you will think using process pool.  </p><p>But let’s think from another side, the server maily handles I/O tasks, i.e waitting socket to be readable, read the data and process it, and write to socket. for this kind of task, we use Non-Blocking I/O.</p><p>Suppose you’re a webserver. Every time you accept a connection with the accept system call (here’s the man page), you get a new file descriptor representing that connection.</p><p>If you’re a web server, you might have thousands of connections open at the same time. You need to know when people send you new data on those connections, so you can process and respond to them.</p><p>You could have a loop that basically does:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> open_connections:</span><br><span class="line">    <span class="keyword">if</span> has_new_input(x):</span><br><span class="line">        process_input(x)</span><br></pre></td></tr></table></figure><p>The problem with this is that it can waste a lot of CPU time. Instead of spending all CPU time to ask “are there updates now? how about now? how about now? how about now?“, instead we’d rather just ask the Linux kernel “hey, here are 100 file descriptors. Tell me when one of them is updated!“.</p><p>The 3 system calls that let you ask Linux to monitor lots of file descriptors are poll, epoll and select. Let’s start with poll and select because that’s where the chapter started.</p><p>I am not gonna talk the details between <code>select/poll/epoll</code>, you can read this post for more: <a href="https://jvns.ca/blog/2017/06/03/async-io-on-linux--select--poll--and-epoll/" target="_blank" rel="noopener">async io on linux select/poll/epoll</a>.</p><p>Python’s select module have support for Linux’s <code>select/poll/epoll</code>, let’s use select rewrite our wsgi server:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WSGIServer</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    address_family = socket.AF_INET</span><br><span class="line">    socket_type = socket.SOCK_STREAM</span><br><span class="line">    request_queue_size = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, server_address)</span>:</span></span><br><span class="line">        <span class="comment"># Create a listening socket</span></span><br><span class="line">        self.listen_socket = listen_socket = socket.socket(</span><br><span class="line">            self.address_family,</span><br><span class="line">            self.socket_type</span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># Allow to reuse the same address</span></span><br><span class="line">        listen_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">        listen_socket.setblocking(<span class="number">0</span>)</span><br><span class="line">        <span class="comment"># Bind</span></span><br><span class="line">        listen_socket.bind(server_address)</span><br><span class="line">        <span class="comment"># Activate</span></span><br><span class="line">        listen_socket.listen(self.request_queue_size)</span><br><span class="line">        <span class="comment"># Get server host name and port</span></span><br><span class="line">        host, port = self.listen_socket.getsockname()[:<span class="number">2</span>]</span><br><span class="line">        self.server_name = socket.getfqdn(host)</span><br><span class="line">        self.server_port = port</span><br><span class="line">        <span class="comment"># Return headers set by Web framework/Web application</span></span><br><span class="line">        self.headers_set = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_app</span><span class="params">(self, application)</span>:</span></span><br><span class="line">        self.application = application</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serve_forever</span><span class="params">(self)</span>:</span></span><br><span class="line">        rlist, wlist, elist = [self.listen_socket], [], []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># listen_socket = self.listen_socket</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            readables, writables, exceptions = select.select(rlist, wlist, elist)</span><br><span class="line">            <span class="keyword">for</span> sock <span class="keyword">in</span> readables:</span><br><span class="line">                <span class="keyword">if</span> sock <span class="keyword">is</span> self.listen_socket:</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        conn, client_address = self.listen_socket.accept()</span><br><span class="line">                    <span class="keyword">except</span> IOError <span class="keyword">as</span> e:</span><br><span class="line">                        code, msg = e.args</span><br><span class="line">                        <span class="keyword">if</span> code == errno.EINTR:</span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="keyword">raise</span></span><br><span class="line">                    rlist.append(conn)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        request_data = sock.recv(<span class="number">1024</span>)</span><br><span class="line">                    <span class="keyword">except</span> ConnectionResetError <span class="keyword">as</span> e:</span><br><span class="line">                        request_data = <span class="literal">None</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> request_data:</span><br><span class="line">                        sock.close()</span><br><span class="line">                        rlist.remove(sock)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        request_data = request_data.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">                        print(<span class="string">''</span>.join(</span><br><span class="line">                            <span class="string">f'&lt; <span class="subst">&#123;line&#125;</span>\n'</span> <span class="keyword">for</span> line <span class="keyword">in</span> request_data.splitlines()</span><br><span class="line">                        ))</span><br><span class="line">                        <span class="comment"># parse request</span></span><br><span class="line">                        (request_method, path, request_version) = self.parse_request(request_data)</span><br><span class="line">                        env = self.get_environ(</span><br><span class="line">                            request_data, request_method, path,</span><br><span class="line">                            self.server_name, self.server_port</span><br><span class="line">                        )</span><br><span class="line">                        result = self.application(env, self.start_response)</span><br><span class="line">                        self.finish_response(result, sock)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_request</span><span class="params">(cls, text)</span>:</span></span><br><span class="line">        request_line = text.splitlines()[<span class="number">0</span>]</span><br><span class="line">        request_line = request_line.rstrip(<span class="string">'\r\n'</span>)</span><br><span class="line">        <span class="keyword">return</span> request_line.split()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_environ</span><span class="params">(self, request_data, request_method, path, server_name, server_port)</span>:</span></span><br><span class="line">        env = &#123;&#125;</span><br><span class="line">        <span class="comment"># The following code snippet does not follow PEP8 conventions</span></span><br><span class="line">        <span class="comment"># but it's formatted the way it is for demonstration purposes</span></span><br><span class="line">        <span class="comment"># to emphasize the required variables and their values</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># Required WSGI variables</span></span><br><span class="line">        env[<span class="string">'wsgi.version'</span>]      = (<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">        env[<span class="string">'wsgi.url_scheme'</span>]   = <span class="string">'http'</span></span><br><span class="line">        env[<span class="string">'wsgi.input'</span>]        = io.StringIO(request_data)</span><br><span class="line">        env[<span class="string">'wsgi.errors'</span>]       = sys.stderr</span><br><span class="line">        env[<span class="string">'wsgi.multithread'</span>]  = <span class="literal">False</span></span><br><span class="line">        env[<span class="string">'wsgi.multiprocess'</span>] = <span class="literal">False</span></span><br><span class="line">        env[<span class="string">'wsgi.run_once'</span>]     = <span class="literal">False</span></span><br><span class="line">        <span class="comment"># Required CGI variables</span></span><br><span class="line">        env[<span class="string">'REQUEST_METHOD'</span>]    = request_method    <span class="comment"># GET</span></span><br><span class="line">        env[<span class="string">'PATH_INFO'</span>]         = path              <span class="comment"># /hello</span></span><br><span class="line">        env[<span class="string">'SERVER_NAME'</span>]       = server_name       <span class="comment"># localhost</span></span><br><span class="line">        env[<span class="string">'SERVER_PORT'</span>]       = str(server_port)  <span class="comment"># 8888</span></span><br><span class="line">        <span class="keyword">return</span> env</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_response</span><span class="params">(self, status, response_headers, exc_info=None)</span>:</span></span><br><span class="line">        <span class="comment"># Add necessary server headers</span></span><br><span class="line">        server_headers = [</span><br><span class="line">            (<span class="string">'Date'</span>, <span class="string">'Mon, 15 Jul 2019 5:54:48 GMT'</span>),</span><br><span class="line">            (<span class="string">'Server'</span>, <span class="string">'WSGIServer 0.2'</span>),</span><br><span class="line">        ]</span><br><span class="line">        self.headers_set = [status, response_headers + server_headers]</span><br><span class="line">        <span class="comment"># To adhere to WSGI specification the start_response must return</span></span><br><span class="line">        <span class="comment"># a 'write' callable. We simplicity's sake we'll ignore that detail</span></span><br><span class="line">        <span class="comment"># for now.</span></span><br><span class="line">        <span class="comment"># return self.finish_response</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">finish_response</span><span class="params">(self, result, conn)</span>:</span></span><br><span class="line">        status, response_headers = self.headers_set</span><br><span class="line">        response = <span class="string">f'HTTP/1.1 <span class="subst">&#123;status&#125;</span>\r\n'</span></span><br><span class="line">        <span class="keyword">for</span> header <span class="keyword">in</span> response_headers:</span><br><span class="line">            response += <span class="string">'&#123;0&#125;: &#123;1&#125;\r\n'</span>.format(*header)</span><br><span class="line">        response += <span class="string">'\r\n'</span></span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> result:</span><br><span class="line">            response += data.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">        <span class="comment"># Print formatted response data a la 'curl -v'</span></span><br><span class="line">        print(<span class="string">''</span>.join(</span><br><span class="line">            <span class="string">f'&gt; <span class="subst">&#123;line&#125;</span>\n'</span> <span class="keyword">for</span> line <span class="keyword">in</span> response.splitlines()</span><br><span class="line">        ))</span><br><span class="line">        response_bytes = response.encode()</span><br><span class="line">        conn.sendall(response_bytes)</span><br></pre></td></tr></table></figure><p>we use following code tell os that give the readable and writable file descriptors when possible:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readables, writables, exceptions = select.select(rlist, wlist, elist)</span><br></pre></td></tr></table></figure><p>and then we loop the <code>readables</code>, if it is a listen_socket, we accept it. if it is a socket with income data, we read it.</p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>Let’s benchmark our wsgi server with following web application, also against Gunicorn:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/hello')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">0.2</span>)  <span class="comment"># simulate that your bussiness logic will take 200 ms</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World'</span></span><br></pre></td></tr></table></figure><p>to benchmark, we use <code>wrk</code> as following:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wrk -c 1000 -d 60 -t 8 http://localhost:8888/hello</span><br></pre></td></tr></table></figure><p>Gunicorn config:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunicorn -w 8 flask_hello:app</span><br></pre></td></tr></table></figure><p>Here is the result for multi-processing version:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">09:00 $ wrk -c 1000 -d 60 -t 8 http://localhost:8888/hello</span><br><span class="line">Running 1m <span class="built_in">test</span> @ http://localhost:8888/hello</span><br><span class="line">  8 threads and 1000 connections</span><br><span class="line">  Thread Stats   Avg      Stdev     Max   +/- Stdev</span><br><span class="line">    Latency   202.47ms  144.58ms   1.99s    94.69%</span><br><span class="line">    Req/Sec    92.84     40.03   282.00     66.11%</span><br><span class="line">  44396 requests <span class="keyword">in</span> 1.00m, 6.35MB <span class="built_in">read</span></span><br><span class="line">  Socket errors: connect 0, <span class="built_in">read</span> 44536, write 437, timeout 214</span><br><span class="line">Requests/sec:    739.07</span><br><span class="line">Transfer/sec:    108.26KB</span><br></pre></td></tr></table></figure><p>Here is the result for Non-Blocking IO version:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">09:07 $ wrk -c 1000 -d 60 -t 8 http://localhost:8888/hello</span><br><span class="line">Running 1m <span class="built_in">test</span> @ http://localhost:8888/hello</span><br><span class="line">  8 threads and 1000 connections</span><br><span class="line">  Thread Stats   Avg      Stdev     Max   +/- Stdev</span><br><span class="line">    Latency   139.15ms   49.91ms   1.91s    77.01%</span><br><span class="line">    Req/Sec   519.52    211.03     1.42k    73.73%</span><br><span class="line">  247992 requests <span class="keyword">in</span> 1.00m, 35.48MB <span class="built_in">read</span></span><br><span class="line">  Socket errors: connect 0, <span class="built_in">read</span> 38, write 0, timeout 417</span><br><span class="line">Requests/sec:   4128.61</span><br><span class="line">Transfer/sec:    604.78KB</span><br></pre></td></tr></table></figure><p>Here is the result with Gunicorn multi-processing version</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">09:03 $ wrk -c 1000 -d 60 -t 8 http://localhost:8000/hello</span><br><span class="line">Running 1m <span class="built_in">test</span> @ http://localhost:8000/hello</span><br><span class="line">  8 threads and 1000 connections</span><br><span class="line">  Thread Stats   Avg      Stdev     Max   +/- Stdev</span><br><span class="line">    Latency    43.78ms   77.65ms   1.97s    97.56%</span><br><span class="line">    Req/Sec   472.75    350.11     2.76k    81.24%</span><br><span class="line">  217149 requests <span class="keyword">in</span> 1.00m, 35.41MB <span class="built_in">read</span></span><br><span class="line">  Socket errors: connect 0, <span class="built_in">read</span> 78, write 147, timeout 94</span><br><span class="line">Requests/sec:   3613.30</span><br><span class="line">Transfer/sec:    603.39KB</span><br></pre></td></tr></table></figure><p>here is the result on my Linux book:</p><table><thead><tr><th></th><th>Single Process</th><th>Multi-Process</th><th>Non-Blocking I/O</th><th>Gunicorn</th></tr></thead><tbody><tr><td>QPS</td><td>todo</td><td>739</td><td>4128</td><td>3613</td></tr></tbody></table><p>And found an interesting thing, Non-Blocking IO will use one process but also can support high qps, at the same time, it takes less CPU than Gunicorn pre-fork model.</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://www.python.org/dev/peps/pep-0333/#implementation-application-notes" target="_blank" rel="noopener">PEP 333: Python web server gateway interfaces v1.0</a><br><a href="https://ruslanspivak.com/lsbaws-part2/" target="_blank" rel="noopener">Let’s build a web server</a><br><a href="https://jvns.ca/blog/2017/06/03/async-io-on-linux--select--poll--and-epoll/" target="_blank" rel="noopener">async io on linux select/poll/epoll</a>  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Let’s build a wsgi server ground up with sockets, multi-processing or Select/Poll/Epoll. to achive this, you need familiar with Python’s socket programming, Python’s cucurreny model, Linux Non-blocking I/O.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Concurrency" scheme="http://yoursite.com/tags/Concurrency/"/>
    
      <category term="WSGI" scheme="http://yoursite.com/tags/WSGI/"/>
    
      <category term="Select" scheme="http://yoursite.com/tags/Select/"/>
    
  </entry>
  
  <entry>
    <title>WSGI 服务器性能分析【译】</title>
    <link href="http://yoursite.com/2020/03/08/WSGI-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2020/03/08/WSGI-服务器性能分析/</id>
    <published>2020-03-08T11:36:07.000Z</published>
    <updated>2020-09-23T17:55:12.030Z</updated>
    
    <content type="html"><![CDATA[<p>突然看到Omed Habib的文章：<a href="https://www.appdynamics.com/blog/engineering/a-performance-analysis-of-python-wsgi-servers-part-2/" target="_blank" rel="noopener">A performance analysis of Python wsgi servers</a>，觉得Bjoern确实可以用在我们项目中，用来替代现有Gunicorn。因此将原文翻译至此，希望更多可以帮助更多人。btw，Bjoern是一个用C和Libuv实现的轻量化WSGI服务器，各方面评测目前基本都处于领先的位置。</p><a id="more"></a><p>在这个系列的第一篇文章中，我介绍了6款比较出名的WSGI Server。在本篇中，我会通过构建benchmark测试集来评测这6款server。  </p><h3 id="CGI和mod-pyton"><a href="#CGI和mod-pyton" class="headerlink" title="CGI和mod_pyton"></a>CGI和mod_pyton</h3><p>在WSGI标准化以前，CGI和mod_python就已经存在了。CGI是通过对每个请求创建一个新的Py进程来处理链接，因此比较低效。 mod_python相对于CGI，性能有提升，但是只能和Apache Http server 集成，况且目前处于inactive devolop的状态。</p><h3 id="WSGI-Servers"><a href="#WSGI-Servers" class="headerlink" title="WSGI Servers"></a>WSGI Servers</h3><p>因为时间关系，我们将重点关注下面的Wsgi server。所有的测试代码都已经发布在 <a href="https://github.com/omedhabib/WSGI_Benchmarks" target="_blank" rel="noopener">github</a>，且我们将会后期更新它。</p><ul><li>Bojern 的官方文档描述其为“非常快的Python WSGI Server” 并且它是“最快的，最小的，最轻量化的”。我们使用默认的配置创建了一个<a href="https://gist.github.com/omedhabib/c3c8ff74ec3993740e80d7235251e73a" target="_blank" rel="noopener">app</a> 来测试它。</li><li>CherryPy 是一个WSGI server和app frawork的实现。</li><li>Gunicorn 理念来自Ruby世界的Unicorn。其官方文档描述为“实现简单，轻量”。和前两者不同的是，Gunicorn是一个独立启动的server。</li><li>Meinheld 称其为“高性能的WSGI兼容web服务器”。根据官方文档，我们创建了这个<a href="https://gist.github.com/omedhabib/d638e213af0f843580e5ca7724005ac6" target="_blank" rel="noopener">测试程序</a></li><li>mod_wsgi 和mod_python 一样来自同一个作者，且只能和apache http server搭配工作。</li><li>uWSGI 是一个功能齐全的WSGI server。同样的根据默认配置我们建立了相应的测试程序。</li></ul><h3 id="压测"><a href="#压测" class="headerlink" title="压测"></a>压测</h3><p>我们使用Docker来跑每个benchmark，这样可以环境隔离，每个测试启动的到时候都是干净的环境，不受当前sys的影响。</p><h4 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h4><ul><li>独立的Docker 容器</li><li>2 CPU</li><li>512 RAM</li></ul><h4 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h4><ul><li>wrk, 一个现代化的HTTP压测工具</li><li>使用在100到10000之间的并发量随机测试一个服务</li><li>wrk 限制使用2个system cpu</li><li>每个测试跑30秒且重复4遍</li></ul><h4 id="性能数据"><a href="#性能数据" class="headerlink" title="性能数据"></a>性能数据</h4><ul><li>wrk提供的请求数量、错误、延迟</li><li>Docker stat工具提供的CPU、mem使用情况</li><li>去掉两边的极值然后取平均</li><li>请参考：<a href="https://github.com/omedhabib/WSGI_Benchmarks/blob/master/benchmark.sh" target="_blank" rel="noopener">script</a></li></ul><h4 id="结果数据"><a href="#结果数据" class="headerlink" title="结果数据"></a>结果数据</h4><p>所有的评测数据都放在项目github目录下的summary csv文件。如果你感兴趣可以将其导入图形化工具来分析。</p><h3 id="QPS"><a href="#QPS" class="headerlink" title="QPS"></a>QPS</h3><p>下图展示了6款server的QPS情况，数据越大越好。<br><img src="/img/wsgi_qps.png" alt="request served"></p><p><img src="/img/wsgi_qps_bjoern_hidden.png" alt="request served bojern hidden"></p><ul><li>Bojern 是明显的胜出者</li><li>CherryPy尽管用纯Python实现，但是其性能相当不错</li><li>Meinheld也可以</li><li>mod_wsgi 性能稳定，但是并没有那么出色</li><li>Gunicorn 随着并发量增大qps下降</li><li>uWSGI表现垫底<br>胜出者：Bojern</li></ul><h3 id="延迟"><a href="#延迟" class="headerlink" title="延迟"></a>延迟</h3><p>延迟就是从请求发出到响应收到这段时间，越短越好。<br><img src="/img/wsgi_latency.png" alt="wsgi_latency"></p><ul><li>CherryPy 在并发量持续增长的情况下表现稳定，基本低于3毫秒</li><li>Bjoern延迟比较大，但是在并发量低的情况下延迟较小</li><li>Gunicorn 延迟一直稳定</li><li>mod_wsgi 处于平均水平</li><li>Meinheld 和Bjoern一样，当并发量增大，延迟增大</li><li>uWSGI 最后一名<br>胜出者：CherryPy<br>Note: Bjoern is the second</li></ul><h3 id="内存使用情况"><a href="#内存使用情况" class="headerlink" title="内存使用情况"></a>内存使用情况</h3><p>这里考察每种服务器使用内存情况，当然是越低越好。<br><img src="/img/wsgi_mem.png" alt="wsgi_mem"></p><ul><li>Bjoern 内存占用最少，即使是10000的并发也只占用了9M</li><li>Meinheld 和Bjoern基本相似</li><li>Gunicorn 在增大并发量的情况下，内存占用稳定</li><li>CherryPy 会随着并发增加占用变大</li><li>mod_wsgi 表现稳定</li><li>uWSGI 又是占用资源最多的<br>胜出者： Bjoern and Beinheld</li></ul><h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><p>这里给出Web server丢弃，断开或者超时链接的情况。<br><img src="/img/wsgi_error.png" alt="wsgi_error"></p><ul><li>CherryPy 基本上零错误</li><li>Bjoern 有遇到error，但是其qps高很多</li><li>mod_wsgi 大概有6%的错误率</li><li>Gunicorn 在高并发的情况下，错误率大概9%</li><li>uWSGI 大概34%的错误率</li><li>Meinheld 错误率比较高<br>胜出者： CherryPy</li></ul><h3 id="CPU使用情况"><a href="#CPU使用情况" class="headerlink" title="CPU使用情况"></a>CPU使用情况</h3><p>CPU使用率高不是坏事也不是好事，前提是提供服务稳定就好。但是在相同的情况下，使用率月底表现越好。</p><p><img src="/img/wsgi_cpu_usage.png" alt="wsgi_cpu_usage"></p><ul><li>Bjoern 是单线程的，其实用率100%</li><li>CherryPy 是多线程，但是因为GIL，其实用率基本150%</li><li>Gunicorn 是多进程，占用率在150%以上</li><li>Meinheld 和Gjoern差不多</li><li>mod_wsgi 真正的多线程，所以基本跑满了CPU</li><li>uWSGI 使用率较低<br>胜出者： None，因为模式不一样，无法比较</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>根据压测结果，我们得出结论:Bjoern性能优异，uWSGI表现最差。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;突然看到Omed Habib的文章：&lt;a href=&quot;https://www.appdynamics.com/blog/engineering/a-performance-analysis-of-python-wsgi-servers-part-2/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;A performance analysis of Python wsgi servers&lt;/a&gt;，觉得Bjoern确实可以用在我们项目中，用来替代现有Gunicorn。因此将原文翻译至此，希望更多可以帮助更多人。btw，Bjoern是一个用C和Libuv实现的轻量化WSGI服务器，各方面评测目前基本都处于领先的位置。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Web Server" scheme="http://yoursite.com/tags/Web-Server/"/>
    
      <category term="WSGI" scheme="http://yoursite.com/tags/WSGI/"/>
    
      <category term="Performance" scheme="http://yoursite.com/tags/Performance/"/>
    
  </entry>
  
  <entry>
    <title>Redis internal 101 --[Draft]</title>
    <link href="http://yoursite.com/2020/02/24/Redis-internal-101/"/>
    <id>http://yoursite.com/2020/02/24/Redis-internal-101/</id>
    <published>2020-02-24T04:18:00.000Z</published>
    <updated>2020-09-23T17:55:12.030Z</updated>
    
    <content type="html"><![CDATA[<p>项目中经常使用Redis作为cache方案，但是你知道为什么Redis作为一种缓存速度如此快？为什么ttl能expire掉你的key？本文来分析这些东西。</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目中经常使用Redis作为cache方案，但是你知道为什么Redis作为一种缓存速度如此快？为什么ttl能expire掉你的key？本文来分析这些东西。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Cache" scheme="http://yoursite.com/tags/Cache/"/>
    
      <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>为什么MySQL采用B树 --[Draft]</title>
    <link href="http://yoursite.com/2020/02/24/%E4%B8%BA%E4%BB%80%E4%B9%88MySQL%E9%87%87%E7%94%A8B%E6%A0%91/"/>
    <id>http://yoursite.com/2020/02/24/为什么MySQL采用B树/</id>
    <published>2020-02-24T04:17:33.000Z</published>
    <updated>2020-09-23T17:55:12.030Z</updated>
    
    <content type="html"><![CDATA[<p>以前只有MySQL, 后来出了很多各种类型的数据库，比如Mongodb，Influxdb，cassandra等，不管哪种数据库，都需要使用索引算法来快速搜索数据。那么我们来看看MySQL使用索引的算法。</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前只有MySQL, 后来出了很多各种类型的数据库，比如Mongodb，Influxdb，cassandra等，不管哪种数据库，都需要使用索引算法来快速搜索数据。那么我们来看看MySQL使用索引的算法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
      <category term="DB" scheme="http://yoursite.com/tags/DB/"/>
    
  </entry>
  
  <entry>
    <title>Django app are slow, Think Again</title>
    <link href="http://yoursite.com/2020/02/24/Django-app-are-slow-Think-Again/"/>
    <id>http://yoursite.com/2020/02/24/Django-app-are-slow-Think-Again/</id>
    <published>2020-02-24T03:59:38.000Z</published>
    <updated>2020-09-23T17:55:12.026Z</updated>
    
    <content type="html"><![CDATA[<p>经常听到同事说Python服务性能不好，要去拥抱Go。但是细想，技术里面没有银弹，在某些场景下，他诚然没有编译型语言快。我们的服务都是一些I/O为主的，大部分的时间可能都是在等待网络I/O，如果换成任何一种编译型语言，难道就没有这种I/O等待了吗？再比如Instagram，Youtube，Dropbox等都在大规模使用Python，为什么人家的服务不会像蜗牛一样呢？自己的Py 服务性能差，我还能做什么呢？<br>本篇来分析为什么目前Django的服务没有我们预想的好？能做些什么来改进？</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经常听到同事说Python服务性能不好，要去拥抱Go。但是细想，技术里面没有银弹，在某些场景下，他诚然没有编译型语言快。我们的服务都是一些I/O为主的，大部分的时间可能都是在等待网络I/O，如果换成任何一种编译型语言，难道就没有这种I/O等待了吗？再比如Instagram，Youtube，Dropbox等都在大规模使用Python，为什么人家的服务不会像蜗牛一样呢？自己的Py 服务性能差，我还能做什么呢？&lt;br&gt;本篇来分析为什么目前Django的服务没有我们预想的好？能做些什么来改进？&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
      <category term="Async" scheme="http://yoursite.com/tags/Async/"/>
    
      <category term="Concurrency" scheme="http://yoursite.com/tags/Concurrency/"/>
    
  </entry>
  
  <entry>
    <title>CPython&#39;s Garbage Collector</title>
    <link href="http://yoursite.com/2020/02/18/CPython-s-Garbage-Collector/"/>
    <id>http://yoursite.com/2020/02/18/CPython-s-Garbage-Collector/</id>
    <published>2020-02-18T02:56:50.000Z</published>
    <updated>2020-09-23T17:55:12.026Z</updated>
    
    <content type="html"><![CDATA[<p>As described in <a href="/2020/02/11/How-Python-manage-memory/">How Python manage memory</a>, we now know how CPython allocate memory for objects, but how CPython reclaim that memory? this post will show you how CPython reclaim memory through Garbage Collector.</p><a id="more"></a><h3 id="Reference-Count"><a href="#Reference-Count" class="headerlink" title="Reference Count"></a>Reference Count</h3><p>CPython use reference count relaim memory, we know that everything in Python is object, <code>int</code>, <code>str</code>, <code>list</code> or <code>dict</code> etc, which all derived from <code>PyObject</code>, which have following struct defination in C:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">object</span> &#123;</span></span><br><span class="line">    Py_ssize_t ob_refcnt;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">typeobject</span> *<span class="title">ob_type</span>;</span></span><br><span class="line">&#125; PyObject;</span><br></pre></td></tr></table></figure><p>the <code>ob_type</code> field indicated current object type, i.e <code>int</code> or <code>str</code> etc. the <code>ob_refcnt</code> is a number, it will be incremented by 1 in following situations:</p><ul><li>variable assignment</li><li>function argument passing</li><li>appending to a container object</li></ul><p>In Python we can get this reference count easily with <code>sys.getrefcount</code>, here is an example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">foo = []  <span class="comment"># now list object's ref count is 1</span></span><br><span class="line"><span class="keyword">print</span> sys.getrefcount(foo)  <span class="comment"># will print 2, cuz getrefcount function will increase 1 count to ref count</span></span><br></pre></td></tr></table></figure><p>when an object’s reference count goes to zero, it will be automatically freed by Python to it’s memory pool. and Python will return memory to operating system only and only if the whole <code>arena</code> memory area are empty. but due to <strong>memory fragement</strong>, all <code>arenas</code> will in used situation, thus Python will hold lots of memory when it is running.</p><p>Reference count is incredibly simple and efficient, but it cant deal with reference cycles. thus Python have an supplemental algorithm called <em>generation garbage collection</em>, .</p><p>The reference counting module is fundamental to Python thus cant be disabled, but <em>generation garbage collection</em> is optional and can be disabled manually like following:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gc.disable()</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="Reference-Cycles"><a href="#Reference-Cycles" class="headerlink" title="Reference Cycles"></a>Reference Cycles</h3><p>A reference cycle occurs when one or more objects referencing each other or itself. </p><p><img src="https://rushter.com/static/uploads/img/circularref.svg" alt="objects referencing each other"></p><p>For container objejcts like <code>list</code>, <code>tuppel</code>, <code>dict</code>, <code>class</code> etc, will meet this cycle.</p><p>here is an example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gc</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># disable generation gc first</span></span><br><span class="line">gc.disable()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># objects referencing each other</span></span><br><span class="line">object_one = &#123;&#125;  <span class="comment"># refcnt: 1</span></span><br><span class="line">object_two = &#123;&#125;  <span class="comment"># refcnt: 2</span></span><br><span class="line"></span><br><span class="line">object_one_addr = id(object_one)</span><br><span class="line">object_two_addr = id(object_two)</span><br><span class="line"></span><br><span class="line">object_one[<span class="string">'object_two'</span>] = object_two  <span class="comment"># refcnt: 2</span></span><br><span class="line">object_two[<span class="string">'object_one'</span>] = object_one  <span class="comment"># refcnt: 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> object_one, object_two  <span class="comment"># after del, the object are unreachable, but the refcnt is still 1, thus cant be reclamed</span></span><br><span class="line"><span class="keyword">print</span> ctypes.c_long.from_address(object_one_addr).value  <span class="comment"># 1</span></span><br><span class="line"><span class="keyword">print</span> ctypes.c_long.from_address(object_two_addr).value  <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># object referencing itself</span></span><br><span class="line">lst_obj = []  <span class="comment"># refcnt: 1</span></span><br><span class="line">lst_obj_addr = id(lst_obj)</span><br><span class="line">lst_obj.append(lst_obj)  <span class="comment"># refcnt: 2</span></span><br><span class="line"><span class="keyword">del</span> lst_obj  <span class="comment"># refcnt: 1, after del, refcnt to object is still 1, thus cant be cleaned</span></span><br><span class="line"><span class="keyword">print</span> ctypes.c_long.from_address(lst_obj_addr).value  <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><p>We know that Reference Counting only free object when it’s <code>ob_refcnt</code> field is zero. but objects which have reference cycles never goes to zero, thus Reference Counting can’t free it.</p><h3 id="Generational-Garbage-Collection"><a href="#Generational-Garbage-Collection" class="headerlink" title="Generational Garbage Collection"></a>Generational Garbage Collection</h3><p>To solve reference cycle problems, CPython use Generational Garbage Collection. Generation GC will run periodically(whenever the number of objects gets over the threshhold <code>gc.get_threshhold()</code>).</p><h4 id="How-to-detect-reference-cycles"><a href="#How-to-detect-reference-cycles" class="headerlink" title="How to detect reference cycles"></a>How to detect reference cycles</h4><p>CPython only focus on container objects, i.e. objects that can contain another object: arrays, dictrionaries, user classes etc. also GC will ignore tupples with only immutable types(int, str).   </p><p>For this CPython have two doubly linked list: one of list objects to be scanned, and a tentatively unreachable list.  </p><p>Let’s take an example: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># object self referencing</span></span><br><span class="line">lst_obj = []</span><br><span class="line">lst_obj.append(lst_obj)</span><br><span class="line"></span><br><span class="line"><span class="comment"># objects ref each other</span></span><br><span class="line">object_one = &#123;&#125;</span><br><span class="line">object_two = &#123;&#125;</span><br><span class="line">object_three = &#123;&#125;</span><br><span class="line"></span><br><span class="line">A = object_one</span><br><span class="line">object_one[<span class="string">'object_two'</span>] = object_two</span><br><span class="line">object_two[<span class="string">'object_three'</span>] = object_three</span><br><span class="line">object_three[<span class="string">'object_one'</span>] = object_one</span><br></pre></td></tr></table></figure><p>1, when gc starts, it has all objects in first list, each object also has an <code>gc_ref</code> field initially equal to <code>ob_refcnt</code>, as following image shows, you can ref code <code>[update_refs](https://hg.python.org/cpython/file/eafe4007c999/Modules/gcmodule.c#l335)</code> for more detailed info:</p><p><img src="https://pythoninternal.files.wordpress.com/2014/07/python-cyclic-gc-1-new-page.png" alt="doubly linked list"></p><p>2, GC then iterate each objects in first list. for each object, it will decrements by 1 the gc_ref of the objects that current object refering.</p><p><img src="https://pythoninternal.files.wordpress.com/2014/07/python-cyclic-gc-2-new-page.png" alt="scan objects"></p><p>3, GC scan again the first list, objects with <code>gc_ref</code> zero are marked as <code>GC_INTENTATIVE_UNREACHABLE</code> and moved to intentative unreachable list, as following image shows:</p><p><img src="https://pythoninternal.files.wordpress.com/2014/07/python-cyclic-gc-3-new-page.png" alt="unreachable intentative list"></p><p>4, GC scan first list again, cuz link1’s gc_ref is 1, it is marked as <code>GC_REACHABLE</code>.</p><p><img src="https://pythoninternal.files.wordpress.com/2014/07/python-cyclic-gc-4-new-page.png" alt="mark reachable">  </p><p>5, When GC encounters rechable objects, it traverse all objects it referencing, mark them <code>GC_REACHABEL</code> too and move them into first list.<br><img src="https://pythoninternal.files.wordpress.com/2014/07/python-cyclic-gc-5-new-page.png" alt="move back">  </p><p>6, When all objects are scaned, the container objects in tentively unreachable list can be garbage collected.</p><h4 id="Optimization-1-limiting-the-time-for-each-collection"><a href="#Optimization-1-limiting-the-time-for-each-collection" class="headerlink" title="Optimization #1: limiting the time for each collection"></a>Optimization #1: limiting the time for each collection</h4><p>The most objects die yong, for example, most objects we created will not be used later, thus can be collected shortly, these are yong objects. on the other side, the older objects are unlikely collected .  </p><p>CPython defined 3 generations of objects from 0 to 2. every new object starts at generation 0, when it survives one GC round, it moves to next generation. the older generation, the longer it lives, thus unlikely collected. </p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>CPython use reference counting mainly, will use generational garbage collection as an suplenmental method. to make your code efficient, plz dont write cyclic reference, this will cost time when generational garbage collector runs.</p><h3 id="Reference-Resource"><a href="#Reference-Resource" class="headerlink" title="Reference Resource"></a>Reference Resource</h3><p><a href="http://arctrix.com/nas/python/gc/" target="_blank" rel="noopener">Portable Garbage Collection</a><br><a href="https://www.youtube.com/watch?v=CLW5Lyc1FN8&t=1139s" target="_blank" rel="noopener">PyCon 2019: Time to take out rubbish: garbage collector by Pablo Galindo Salgado</a><br><a href="https://www.youtube.com/watch?v=F6u5rhUQ6dU" target="_blank" rel="noopener">PyCon 2016: Memory management in Python by Nina Zakharenko</a><br><a href="https://pythoninternal.wordpress.com/2014/08/04/the-garbage-collector/" target="_blank" rel="noopener">The Garbage Collector by Lpoulain</a><br><a href="https://rushter.com/blog/python-garbage-collector/" target="_blank" rel="noopener">Garbage collection in Python: things you need to know by Aertem Golubin</a>  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;As described in &lt;a href=&quot;/2020/02/11/How-Python-manage-memory/&quot;&gt;How Python manage memory&lt;/a&gt;, we now know how CPython allocate memory for objects, but how CPython reclaim that memory? this post will show you how CPython reclaim memory through Garbage Collector.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="CPtyhon" scheme="http://yoursite.com/tags/CPtyhon/"/>
    
      <category term="GC" scheme="http://yoursite.com/tags/GC/"/>
    
      <category term="Memory Management" scheme="http://yoursite.com/tags/Memory-Management/"/>
    
  </entry>
  
  <entry>
    <title>Speed up your code with concurrency</title>
    <link href="http://yoursite.com/2020/02/11/Speed-up-your-code-with-concurrency/"/>
    <id>http://yoursite.com/2020/02/11/Speed-up-your-code-with-concurrency/</id>
    <published>2020-02-11T01:55:06.000Z</published>
    <updated>2020-09-23T17:55:12.030Z</updated>
    
    <content type="html"><![CDATA[<p>Why my code still slow after i <a href="/2020/02/01/Profiling-and-Optimizing/">Profiling and Optimizing</a>, or even <a href="/2020/02/09/Lift-Your-Python-Speed/">Lift Your Python Speed</a>? what else could i do to improve the speed of my code? the answer is <code>concurrency</code>!</p><a id="more"></a><p>There are two kinds of tasks, i.e CPU bound or I/O bound task. if your task mainly focus on calculation, then it’s a CPU bound, if your task mainly spend time waitting File I/O, Network I/O etc, then its a I/O bound task. </p><p>Python have <code>multi-threading</code>, <code>multi-processing</code>, <code>asyncio</code>, for different kinds of task, you need use different kinds of concurrency.</p><blockquote><p>note concurrency is time sharing, even though multiple tasks <code>runing</code> the same time, there are only one task runing in the CPU at a time. but parallism will use multi cpus run the tasks at the same time.</p></blockquote><p>I will use an I/O bound task and CPU bound task show you how these methods can speedup your code.</p><h3 id="Speedup-I-O-bound-task"><a href="#Speedup-I-O-bound-task" class="headerlink" title="Speedup I/O bound task"></a>Speedup I/O bound task</h3><p>Task: download page from many sites</p><h4 id="Sync-version"><a href="#Sync-version" class="headerlink" title="Sync version"></a>Sync version</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_site</span><span class="params">(url, session)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> response:</span><br><span class="line">        print(<span class="string">f"Read <span class="subst">&#123;len(response.content)&#125;</span> from <span class="subst">&#123;url&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_all_sites</span><span class="params">(sites)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> requests.Session() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> sites:</span><br><span class="line">            download_site(url, session)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    sites = [</span><br><span class="line">        <span class="string">"http://csrgxtu.github.io/2020/02/18/CPython-s-Garbage-Collector/"</span>,</span><br><span class="line">        <span class="string">"http://csrgxtu.github.io/2020/02/11/Speed-up-your-code-with-concurrency/"</span>,</span><br><span class="line">    ] * <span class="number">80</span></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    download_all_sites(sites)</span><br><span class="line">    duration = time.time() - start_time</span><br><span class="line">    print(<span class="string">f"Downloaded <span class="subst">&#123;len(sites)&#125;</span> in <span class="subst">&#123;duration&#125;</span> seconds"</span>)</span><br></pre></td></tr></table></figure><p>run it on my mac (Processor: 2.7 GHz Intel Core i7, Memory: 16GB 2133 MHz LPDDR3)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ python3 download_sites.py</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">Read 18547 from http://csrgxtu.github.io/2020/02/11/Speed-up-your-code-with-concurrency/</span><br><span class="line">Read 32524 from http://csrgxtu.github.io/2020/02/18/CPython<span class="_">-s</span>-Garbage-Collector/</span><br><span class="line">Read 18547 from http://csrgxtu.github.io/2020/02/11/Speed-up-your-code-with-concurrency/</span><br><span class="line">Read 32524 from http://csrgxtu.github.io/2020/02/18/CPython<span class="_">-s</span>-Garbage-Collector/</span><br><span class="line">Read 18547 from http://csrgxtu.github.io/2020/02/11/Speed-up-your-code-with-concurrency/</span><br><span class="line">Downloaded 160 <span class="keyword">in</span> 147.5717649459839 seconds</span><br></pre></td></tr></table></figure><p>it took 147.57 seconds. if you run upper code, the time will be different, cuz it depends on your network connection.</p><h4 id="Multi-threading-version"><a href="#Multi-threading-version" class="headerlink" title="Multi-threading version"></a>Multi-threading version</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> concurrent.futures</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">thread_local = threading.local()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_session</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> hasattr(thread_local, <span class="string">"session"</span>):</span><br><span class="line">        thread_local.session = requests.Session()</span><br><span class="line">    <span class="keyword">return</span> thread_local.session</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_site</span><span class="params">(url)</span>:</span></span><br><span class="line">    session = get_session()</span><br><span class="line">    <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> response:</span><br><span class="line">        print(<span class="string">f"Read <span class="subst">&#123;len(response.content)&#125;</span> from <span class="subst">&#123;url&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_all_sites</span><span class="params">(sites)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> concurrent.futures.ThreadPoolExecutor(max_workers=<span class="number">5</span>) <span class="keyword">as</span> executor:</span><br><span class="line">        executor.map(download_site, sites)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    sites = [</span><br><span class="line">        <span class="string">"http://csrgxtu.github.io/2020/02/18/CPython-s-Garbage-Collector/"</span>,</span><br><span class="line">        <span class="string">"http://csrgxtu.github.io/2020/02/11/Speed-up-your-code-with-concurrency/"</span>,</span><br><span class="line">    ] * <span class="number">80</span></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    download_all_sites(sites)</span><br><span class="line">    duration = time.time() - start_time</span><br><span class="line">    print(<span class="string">f"Downloaded <span class="subst">&#123;len(sites)&#125;</span> in <span class="subst">&#123;duration&#125;</span> seconds"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ python3 download_sites.py</span><br><span class="line"></span><br><span class="line">Read 32524 from http://csrgxtu.github.io/2020/02/18/CPython<span class="_">-s</span>-Garbage-Collector/</span><br><span class="line">Read 18547 from http://csrgxtu.github.io/2020/02/11/Speed-up-your-code-with-concurrency/</span><br><span class="line">Read 32524 from http://csrgxtu.github.io/2020/02/18/CPython<span class="_">-s</span>-Garbage-Collector/</span><br><span class="line">Read 32524 from http://csrgxtu.github.io/2020/02/18/CPython<span class="_">-s</span>-Garbage-Collector/</span><br><span class="line">Read 18547 from http://csrgxtu.github.io/2020/02/11/Speed-up-your-code-with-concurrency/</span><br><span class="line">Downloaded 160 <span class="keyword">in</span> 34.54466891288757 seconds</span><br></pre></td></tr></table></figure><p>it took 34.54 seconds.</p><h4 id="Multi-processing-version"><a href="#Multi-processing-version" class="headerlink" title="Multi-processing version"></a>Multi-processing version</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> concurrent.futures</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_site</span><span class="params">(url)</span>:</span></span><br><span class="line">    session = requests.Session()</span><br><span class="line">    <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> response:</span><br><span class="line">        print(<span class="string">f"Read <span class="subst">&#123;len(response.content)&#125;</span> from <span class="subst">&#123;url&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_all_sites</span><span class="params">(sites)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> concurrent.futures.ProcessPoolExecutor(max_workers=<span class="number">5</span>) <span class="keyword">as</span> executor:</span><br><span class="line">        executor.map(download_site, sites)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    sites = [</span><br><span class="line">        <span class="string">"http://csrgxtu.github.io/2020/02/18/CPython-s-Garbage-Collector/"</span>,</span><br><span class="line">        <span class="string">"http://csrgxtu.github.io/2020/02/11/Speed-up-your-code-with-concurrency/"</span>,</span><br><span class="line">    ] * <span class="number">80</span></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    download_all_sites(sites)</span><br><span class="line">    duration = time.time() - start_time</span><br><span class="line">    print(<span class="string">f"Downloaded <span class="subst">&#123;len(sites)&#125;</span> in <span class="subst">&#123;duration&#125;</span> seconds"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ python3 download_sites.py</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">Read 18547 from http://csrgxtu.github.io/2020/02/11/Speed-up-your-code-with-concurrency/</span><br><span class="line">Read 32524 from http://csrgxtu.github.io/2020/02/18/CPython<span class="_">-s</span>-Garbage-Collector/</span><br><span class="line">Read 18547 from http://csrgxtu.github.io/2020/02/11/Speed-up-your-code-with-concurrency/</span><br><span class="line">Read 32524 from http://csrgxtu.github.io/2020/02/18/CPython<span class="_">-s</span>-Garbage-Collector/</span><br><span class="line">Read 18547 from http://csrgxtu.github.io/2020/02/11/Speed-up-your-code-with-concurrency/</span><br><span class="line">Downloaded 160 <span class="keyword">in</span> 41.209649085998535 seconds</span><br></pre></td></tr></table></figure><p>it took 41.20 seconds</p><h4 id="Async-IO-version"><a href="#Async-IO-version" class="headerlink" title="Async-IO version"></a>Async-IO version</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">download_site</span><span class="params">(session, url)</span>:</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> response:</span><br><span class="line">        print(<span class="string">"Read &#123;0&#125; from &#123;1&#125;"</span>.format(response.content_length, url))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">download_all_sites</span><span class="params">(sites)</span>:</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        tasks = []</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> sites:</span><br><span class="line">            task = asyncio.ensure_future(download_site(session, url))</span><br><span class="line">            tasks.append(task)</span><br><span class="line">        <span class="keyword">await</span> asyncio.gather(*tasks, return_exceptions=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    sites = [</span><br><span class="line">        <span class="string">"http://csrgxtu.github.io/2020/02/18/CPython-s-Garbage-Collector/"</span>,</span><br><span class="line">        <span class="string">"http://csrgxtu.github.io/2020/02/11/Speed-up-your-code-with-concurrency/"</span>,</span><br><span class="line">    ] * <span class="number">80</span></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    asyncio.get_event_loop().run_until_complete(download_all_sites(sites))</span><br><span class="line">    duration = time.time() - start_time</span><br><span class="line">    print(<span class="string">f"Downloaded <span class="subst">&#123;len(sites)&#125;</span> sites in <span class="subst">&#123;duration&#125;</span> seconds"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ python3 download_sites.py</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">Read 5112 from http://csrgxtu.github.io/2020/02/11/Speed-up-your-code-with-concurrency/</span><br><span class="line">Read 5112 from http://csrgxtu.github.io/2020/02/11/Speed-up-your-code-with-concurrency/</span><br><span class="line">Read 5112 from http://csrgxtu.github.io/2020/02/11/Speed-up-your-code-with-concurrency/</span><br><span class="line">Read 8104 from http://csrgxtu.github.io/2020/02/18/CPython<span class="_">-s</span>-Garbage-Collector/</span><br><span class="line">Downloaded 160 sites <span class="keyword">in</span> 14.110821962356567 seconds</span><br></pre></td></tr></table></figure><p>it took 14.11 seconds.</p><h4 id="Multi-processing-Async-I-O"><a href="#Multi-processing-Async-I-O" class="headerlink" title="Multi-processing + Async-I/O"></a>Multi-processing + Async-I/O</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> concurrent.futures</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">download_site</span><span class="params">(session, url)</span>:</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> response:</span><br><span class="line">        print(<span class="string">"Read &#123;0&#125; from &#123;1&#125;"</span>.format(response.content_length, url))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">download_all_sites</span><span class="params">(sites)</span>:</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        tasks = []</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> sites:</span><br><span class="line">            task = asyncio.ensure_future(download_site(session, url))</span><br><span class="line">            tasks.append(task)</span><br><span class="line">        <span class="keyword">await</span> asyncio.gather(*tasks, return_exceptions=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">asyc_tasks</span><span class="params">(sites)</span>:</span></span><br><span class="line">    asyncio.get_event_loop().run_until_complete(download_all_sites(sites))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chunks</span><span class="params">(lst, n)</span>:</span></span><br><span class="line">    <span class="string">"""Yield successive n-sized chunks from lst."""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(lst), n):</span><br><span class="line">        <span class="keyword">yield</span> lst[i:i + n]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    sites = [</span><br><span class="line">        <span class="string">"http://csrgxtu.github.io/2020/02/18/CPython-s-Garbage-Collector/"</span>,</span><br><span class="line">        <span class="string">"http://csrgxtu.github.io/2020/02/11/Speed-up-your-code-with-concurrency/"</span>,</span><br><span class="line">    ] * <span class="number">80</span></span><br><span class="line">    start_time = time.time()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> concurrent.futures.ProcessPoolExecutor(max_workers=<span class="number">5</span>) <span class="keyword">as</span> executor:</span><br><span class="line">        futures = [executor.submit(asyc_tasks, s) <span class="keyword">for</span> s <span class="keyword">in</span> chunks(sites, <span class="number">5</span>)]</span><br><span class="line">        <span class="keyword">for</span> future <span class="keyword">in</span> concurrent.futures.as_completed(futures):</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    duration = time.time() - start_time</span><br><span class="line">    print(<span class="string">f"Downloaded <span class="subst">&#123;len(sites)&#125;</span> sites in <span class="subst">&#123;duration&#125;</span> seconds"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ python download_sites.py</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">Read 8104 from http://csrgxtu.github.io/2020/02/18/CPython<span class="_">-s</span>-Garbage-Collector/</span><br><span class="line">Read 5112 from http://csrgxtu.github.io/2020/02/11/Speed-up-your-code-with-concurrency/</span><br><span class="line">Read 8104 from http://csrgxtu.github.io/2020/02/18/CPython<span class="_">-s</span>-Garbage-Collector/</span><br><span class="line">Read 8104 from http://csrgxtu.github.io/2020/02/18/CPython<span class="_">-s</span>-Garbage-Collector/</span><br><span class="line">Read 8104 from http://csrgxtu.github.io/2020/02/18/CPython<span class="_">-s</span>-Garbage-Collector/</span><br><span class="line">Read 5112 from http://csrgxtu.github.io/2020/02/11/Speed-up-your-code-with-concurrency/</span><br><span class="line">Downloaded 160 sites <span class="keyword">in</span> 6.9041831493377686 seconds</span><br></pre></td></tr></table></figure><p>it took 6.90 seconds.</p><p>Here is the summary result of the upper experiments:  </p><table><thead><tr><th align="center">x</th><th>Sync</th><th>Threading</th><th>Processing</th><th>Async-I/O</th><th>Processing+Async-I/O</th></tr></thead><tbody><tr><td align="center">Time(Seconds)</td><td>147.57</td><td>35.54</td><td>41.20</td><td>14.11</td><td>6.90</td></tr></tbody></table><p>For sync version, it request the site one by one, thus most time spend on waiting network I/O. here is a diagram：</p><p><img src="https://files.realpython.com/media/IOBound.4810a888b457.png" alt="sync version">  </p><p>By using Threading or Processing, OS will switch the threading or processing, when one task is waitting or running, OS will put other task into running, thus will reduce the total time on waitting I/O, here is the diagram for threading.:</p><p><img src="https://files.realpython.com/media/Threading.3eef48da829e.png" alt="threading">  </p><p>here is the multi-processing diagram:</p><p><img src="https://files.realpython.com/media/MProc.7cf3be371bbc.png" alt="processing">  </p><p>As we can see, multi-processing version is slower than multi-threading version, one reason is that process is heavier than thread, it needs to start new interpreter for each process.</p><p>Both multi-threading and multi-processing depend on OS’s process management. i.e we don’t know when our task will be switched from running to pending.   </p><p>Async-I/O will use event loop, you need decide when your task need to switch. i.e if it comes to I/O, you need switch to another task, when I/O done, you need process it. if you forget it when coding, it will pending the main loop forever!!! here is the diagram:</p><p><img src="https://files.realpython.com/media/Asyncio.31182d3731cf.png" alt="async">  </p><p>For more information on Async, plz refer <a href="https://stackoverflow.com/questions/49005651/how-does-asyncio-actually-work/51116910#51116910" target="_blank" rel="noopener">async</a> or google <code>how async works?</code></p><p>Note: Python 2 dont have async support yet, but you can use 3rd party libs: <code>gevent</code> or <code>tonardo</code>. plz use latest Python version.</p><h3 id="Speedup-CPU-bound-task"><a href="#Speedup-CPU-bound-task" class="headerlink" title="Speedup CPU bound task"></a>Speedup CPU bound task</h3><p>Task: computes the sum of the squares of each number from 0 to the passed-in value</p><h4 id="sync"><a href="#sync" class="headerlink" title="sync"></a>sync</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cpu_bound</span><span class="params">(number)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> sum(i * i <span class="keyword">for</span> i <span class="keyword">in</span> range(number))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_sums</span><span class="params">(numbers)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> numbers:</span><br><span class="line">        cpu_bound(number)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    numbers = [<span class="number">5000000</span> + x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">20</span>)]</span><br><span class="line"></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    find_sums(numbers)</span><br><span class="line">    duration = time.time() - start_time</span><br><span class="line">    print(<span class="string">f"Duration <span class="subst">&#123;duration&#125;</span> seconds"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python3 cpu_bound.py</span><br><span class="line"></span><br><span class="line">Duration 11.239729881286621 seconds</span><br></pre></td></tr></table></figure><p>this will be done on a signle thread on a signle process on a signle cpu. here is the diagram:</p><p><img src="https://files.realpython.com/media/CPUBound.d2d32cb2626c.png" alt="sync cpu bound">  </p><h4 id="theading-or-async-version"><a href="#theading-or-async-version" class="headerlink" title="theading or async version"></a>theading or async version</h4><p>if you rewrite upper code into threading or async, it will slow down, cuz threading context switch or code complicity added by both will take additional time.</p><h4 id="multiprocessing"><a href="#multiprocessing" class="headerlink" title="multiprocessing"></a>multiprocessing</h4><p>Python’s <code>multiprocessing</code> module is designed to share heavy CPU workloads to multi CPUS.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cpu_bound</span><span class="params">(number)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> sum(i * i <span class="keyword">for</span> i <span class="keyword">in</span> range(number))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_sums</span><span class="params">(numbers)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> multiprocessing.Pool() <span class="keyword">as</span> pool:</span><br><span class="line">        pool.map(cpu_bound, numbers)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    numbers = [<span class="number">5</span>_000_000 + x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">20</span>)]</span><br><span class="line"></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    find_sums(numbers)</span><br><span class="line">    duration = time.time() - start_time</span><br><span class="line">    print(<span class="string">f"Duration <span class="subst">&#123;duration&#125;</span> seconds"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python3 cpu_bound.py</span><br><span class="line">Duration 3.2296340465545654 seconds</span><br></pre></td></tr></table></figure><p>as you can see, it only use 3.22 seconds with multi-processing.</p><p>here is the diagram:</p><p><img src="https://files.realpython.com/media/CPUMP.69c1a7fad9c4.png" alt="multi-cpus"></p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>For tasks that wont run frequently, it is no need to use concurrency, cuz adding concurrency support need additional work to change your code and also increases the complecity. if your code is I/O bound, then <code>Async-I/O</code> or <code>Multi-Processing + Async-I/O</code> will be a better choice. for CPU bound tasks, use <code>Multi-Processing</code>.  </p><p><em>My Django app is slow? think again!!!</em></p><h3 id="Rerence"><a href="#Rerence" class="headerlink" title="Rerence"></a>Rerence</h3><p><a href="https://stackoverflow.com/questions/49005651/how-does-asyncio-actually-work/51116910#51116910" target="_blank" rel="noopener">how async works</a><br><a href="https://www.youtube.com/watch?v=MCs5OvhV9S4" target="_blank" rel="noopener">Python concurrency from ground up by David Beazley from Pycon 2015</a><br><a href="https://realpython.com/python-concurrency/" target="_blank" rel="noopener">Python concurrency by Jim Anderson</a>  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Why my code still slow after i &lt;a href=&quot;/2020/02/01/Profiling-and-Optimizing/&quot;&gt;Profiling and Optimizing&lt;/a&gt;, or even &lt;a href=&quot;/2020/02/09/Lift-Your-Python-Speed/&quot;&gt;Lift Your Python Speed&lt;/a&gt;? what else could i do to improve the speed of my code? the answer is &lt;code&gt;concurrency&lt;/code&gt;!&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Concurrency" scheme="http://yoursite.com/tags/Concurrency/"/>
    
  </entry>
  
  <entry>
    <title>How Python manage memory</title>
    <link href="http://yoursite.com/2020/02/11/How-Python-manage-memory/"/>
    <id>http://yoursite.com/2020/02/11/How-Python-manage-memory/</id>
    <published>2020-02-11T01:28:45.000Z</published>
    <updated>2020-09-23T17:55:12.026Z</updated>
    
    <content type="html"><![CDATA[<p>Python is a garbage collection language, means programmers don’t need to care about memory when coding. until we meet high memory usage in production environment and don’t know why our Django web application takes so much memory. to understand why high memory usage in Python web application, need to know following:  </p><ul><li>CPython’s memory management model</li><li>CPython’s GC</li><li>What can we do to reduce memory usage<a id="more"></a></li></ul><h3 id="Python-implementations"><a href="#Python-implementations" class="headerlink" title="Python implementations"></a>Python implementations</h3><p>Python have many implementations, like CPython, PyPy, Jython, IronPython etc. each of the implementation have it’s own memory management model and Garbage collector. In most case, we use CPython, which is writen in C language. thus i will only cover CPython’s memory management model and garbage collector.  </p><h3 id="How-old-version-CPython-manage-memory"><a href="#How-old-version-CPython-manage-memory" class="headerlink" title="How old version CPython manage memory"></a>How old version CPython manage memory</h3><p>In older version Python, like versions before 2.2, CPython use <code>glibc</code>‘s <code>malloc</code> and <code>free</code> allocate and release memory directly. when u create objects, CPython will call <code>glibc</code>‘s method to allocate memory. when objects no longer needed, it will freeed by <code>glibc</code>. without memory management, this method works but not efficiency. cuz we will constantly create new objects and release them, this will cuz constantly invocation of <code>glibc</code>, thus slow down the Python code. but, this way is simple, and won’t waste memory(only allocate memory when needed and return it back to OS when no need).  </p><p>here is the corresponding logic chart for old version CPython<br><img src="/img/old_version_cpython_mem_logic.png" alt="old version cpython memory layer">  </p><h3 id="How-CPython-manage-memory-now"><a href="#How-CPython-manage-memory-now" class="headerlink" title="How CPython manage memory now?"></a>How CPython manage memory now?</h3><p>Request memory when needed works fine, but it needs constantly invocation of <code>glibc</code> methods. like working with threading or processing, we usaully use <code>pool</code>. when need new thread/processing to run, we just create it from pool in our code directly instead of calling <code>multithreading</code> or <code>multiprocessing</code> directly, this sames us time.  </p><p>To make memory allocation or release more efficiently, Python starts using a new memory model since 2.4. here is the logic chart for new memory model:</p><p><img src="/img/py-mem-model.png" alt="py memory model"></p><p>CPython has an object allocator that is responsible for allocating memory within the object memory area. This object allocator is where most of the magic happens. It gets called every time a new object needs space allocated or deleted.  </p><p>To manage memeory, CPython object allocator use <strong>Arenas</strong>, <strong>Pools</strong>, <strong>Blocks</strong> internally. lets explain them one by one.</p><h4 id="Arenas"><a href="#Arenas" class="headerlink" title="Arenas"></a>Arenas</h4><p>The arena is a chunk of 256kB memory allocated on the heap, which provides memory for 64 pools. here is the logic chart of arena:</p><p><img src="/img/arena.png" alt="arena png"></p><p>the structure of the Arena objects looks like following:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">arena_object</span> &#123;</span></span><br><span class="line">    <span class="keyword">uintptr_t</span> address;</span><br><span class="line">    block* pool_address;</span><br><span class="line">    uint nfreepools;</span><br><span class="line">    uint ntotalpools;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pool_header</span>* <span class="title">freepools</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">arena_object</span>* <span class="title">nextarena</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">arena_object</span>* <span class="title">prevarena</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>All arenas are linked using doubly linked list (the <code>nextarena</code> and <code>prevarena</code> fields), <code>address</code> is the header address of the doubly linked list, it helps to manage them. The <code>ntotalpools</code> and <code>nfreepools</code> are storing information about currently available pools.  </p><p>The freepools field points to the linked list of available pools.  </p><h4 id="Pools"><a href="#Pools" class="headerlink" title="Pools"></a>Pools</h4><p>A collection of blocks of the same size is called a pool. it’s 4kb, same with OS’s default page size. limiting pool with a fixed size of blocks helps with fragmentation.  </p><p>the structure of the Pool objects looks like following:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Pool for small blocks. */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pool_header</span> &#123;</span></span><br><span class="line">    <span class="keyword">union</span> &#123; block *_padding;</span><br><span class="line">            uint count; &#125; ref;          <span class="comment">/* number of allocated blocks    */</span></span><br><span class="line">    block *freeblock;                   <span class="comment">/* pool's free list head         */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pool_header</span> *<span class="title">nextpool</span>;</span>       <span class="comment">/* next pool of this size class  */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pool_header</span> *<span class="title">prevpool</span>;</span>       <span class="comment">/* previous pool       ""        */</span></span><br><span class="line">    uint arenaindex;                    <span class="comment">/* index into arenas of base adr */</span></span><br><span class="line">    uint szidx;                         <span class="comment">/* block size class index        */</span></span><br><span class="line">    uint nextoffset;                    <span class="comment">/* bytes to virgin block         */</span></span><br><span class="line">    uint maxnextoffset;                 <span class="comment">/* largest valid nextoffset      */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Pools of the same sized blocks are linked together using doubly linked list (the nextpool and prevpool fields). The szidx field keeps the size class index, whereas ref.count keeps the number of used blocks. The arenaindex stores the number of an arena in which Pool was created. </p><p>The freeblock field is described as follows:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Blocks within pools are again carved out as needed.  pool-&gt;freeblock points to</span><br><span class="line">the start of a singly-linked list of free blocks within the pool.  When a</span><br><span class="line">block is freed, it<span class="string">'s inserted at the front of its pool'</span>s freeblock list.  Note</span><br><span class="line">that the available blocks <span class="keyword">in</span> a pool are *not* linked all together when a pool</span><br><span class="line">is initialized.  Instead only <span class="string">"the first two"</span> (lowest addresses) blocks are</span><br><span class="line"><span class="built_in">set</span> up, returning the first such block, and setting pool-&gt;freeblock to a</span><br><span class="line">one-block list holding the second such block.  This is consistent with that</span><br><span class="line">pymalloc strives at all levels (arena, pool, and block) never to touch a piece</span><br><span class="line">of memory until it<span class="string">'s actually needed.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">So long as a pool is in the used state, we'</span>re certain there *is* a block</span><br><span class="line">available <span class="keyword">for</span> allocating, and pool-&gt;freeblock is not NULL.  If pool-&gt;freeblock</span><br><span class="line">points to the end of the free list before we<span class="string">'ve carved the entire pool into</span></span><br><span class="line"><span class="string">blocks, that means we simply haven'</span>t yet gotten to one of the higher-address</span><br><span class="line">blocks.  The offset from the pool_header to the start of <span class="string">"the next"</span> virgin</span><br><span class="line">block is stored <span class="keyword">in</span> the pool_header nextoffset member, and the largest value</span><br><span class="line">of nextoffset that makes sense is stored <span class="keyword">in</span> the maxnextoffset member when a</span><br><span class="line">pool is initialized.  All the blocks <span class="keyword">in</span> a pool have been passed out at least</span><br><span class="line">once when and only when nextoffset &gt; maxnextoffset.</span><br></pre></td></tr></table></figure><p>here is the block size index table:  </p><table><thead><tr><th align="center">Request in Bytes</th><th align="center">Size of allocated block</th><th align="center">Size class index</th></tr></thead><tbody><tr><td align="center">1-8</td><td align="center">8</td><td align="center">0</td></tr><tr><td align="center">9-16</td><td align="center">16</td><td align="center">1</td></tr><tr><td align="center">…</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">505-512</td><td align="center">512</td><td align="center">63</td></tr></tbody></table><p>Pool have three states:  </p><ul><li>Used, partially used, neither full or empty</li><li>Full, all pool’s blocks are currently allocated</li><li>Empty, all pool’s blocks are currently available for allocation</li></ul><p>In order to effiently manage pools, Cpython use an array called <code>usedpools</code>, it stores pointers to pools grouped by class as following image shows:</p><p><img src="https://rushter.com/static/uploads/img/usedpools.svg" alt="usedpool array"></p><p>Note that pools and blocks are not allocating memory directly, instead, they are using already allocated space from arenas.</p><h4 id="Blocks"><a href="#Blocks" class="headerlink" title="Blocks"></a>Blocks</h4><p>Blocks are a chunk of memory of certain size. there are 64 kinds of blocks, as block size index table shows, your <code>int</code> or <code>list</code> will finnaly use these blocks.:</p><table><thead><tr><th align="center">Request in Bytes</th><th align="center">Size of allocated block</th><th align="center">Size class index</th></tr></thead><tbody><tr><td align="center">1-8</td><td align="center">8</td><td align="center">0</td></tr><tr><td align="center">9-16</td><td align="center">16</td><td align="center">1</td></tr><tr><td align="center">…</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">505-512</td><td align="center">512</td><td align="center">63</td></tr></tbody></table><h3 id="Garbage-Collector"><a href="#Garbage-Collector" class="headerlink" title="Garbage Collector"></a>Garbage Collector</h3><p>When you create objects in your code, CPython’s object allocator will allocate blocks of memeory from pool or arena(CPython’s memory manager). when you leave your code, CPython’s garbage collector will free the memory to Python memeory manager.  </p><p>For detail, ref post <a href="/2020/02/18/CPython-s-Garbage-Collector/">CPython’s Garbage Collector</a></p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://github.com/python/cpython/blob/7d6ddb96b34b94c1cbdf95baa94492c48426404e/Objects/obmalloc.c" target="_blank" rel="noopener">Github: CPython’s obmalloc.c</a><br><a href="https://realpython.com/python-memory-management/" target="_blank" rel="noopener">Real Python: Python memory management</a><br><a href="https://realpython.com/python-memory-management/" target="_blank" rel="noopener">Ruster: Python memory management</a><br><a href="https://www.evanjones.ca/memoryallocator/" target="_blank" rel="noopener">Evan Johes: Improving Python’s memory allocator</a><br><a href="https://www.youtube.com/watch?v=HHFCFJSPWrI" target="_blank" rel="noopener">EuroPython 2011: Understading Python’s memory model: Mutability and Methods</a>  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python is a garbage collection language, means programmers don’t need to care about memory when coding. until we meet high memory usage in production environment and don’t know why our Django web application takes so much memory. to understand why high memory usage in Python web application, need to know following:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPython’s memory management model&lt;/li&gt;
&lt;li&gt;CPython’s GC&lt;/li&gt;
&lt;li&gt;What can we do to reduce memory usage
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Memory Management" scheme="http://yoursite.com/tags/Memory-Management/"/>
    
  </entry>
  
  <entry>
    <title>春天还会遥远吗</title>
    <link href="http://yoursite.com/2020/02/10/%E6%98%A5%E5%A4%A9%E8%BF%98%E4%BC%9A%E9%81%A5%E8%BF%9C%E5%90%97/"/>
    <id>http://yoursite.com/2020/02/10/春天还会遥远吗/</id>
    <published>2020-02-10T01:34:11.000Z</published>
    <updated>2020-09-23T17:55:12.030Z</updated>
    
    <content type="html"><![CDATA[<p>这个春节与以往不同。年前项目开会，计划下一个季度的工作，假日值班，个人请假，假期学习计划。家里办年夜饭，年后准备走亲访友。一切如常进行着，直到回到老家后的第四天，武汉封城，老家戒严，河南人民的隔离行动全国闻名，方知事态严重。真的好比《让子弹飞》里面的台词所形容：</p><blockquote><p>吃着火锅唱着歌，突然就让麻匪给劫了。</p></blockquote><a id="more"></a><p>为了安全，为了瘟疫尽快过去，响应政府号召，呆在家里，密切关注着相关新闻。期间感觉到了无聊，恐惧，麻木不仁。但也看到了一些让自己感动的东西，比如有人修改了叶挺将军的《囚歌》来劝诫大家不要外出：</p><blockquote><p>为人进出的门紧锁着；<br>想死的门敞开着；<br>有个病毒在外高喊着：<br>“出来玩吧，给你自由！”<br>但我深深的知道 —-<br>出去了，就死定了。<br>人的生命只有一次！<br>算求了，<br>再宅十几天就自由了！<br>           《疫歌》</p></blockquote><p>现在看到通报的数字是麻木的了，但是今早看到豆瓣用户<code>小杭</code>的日记，真的体会到了那种恐惧，无奈：<br><a href="https://www.douban.com/people/cclethe/statuses" target="_blank" rel="noopener">小杭的广播</a></p><p><img src="/img/xiaohang.png" alt="小杭的广播"></p><p>今天她没有更新了，不知道状态如何。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个春节与以往不同。年前项目开会，计划下一个季度的工作，假日值班，个人请假，假期学习计划。家里办年夜饭，年后准备走亲访友。一切如常进行着，直到回到老家后的第四天，武汉封城，老家戒严，河南人民的隔离行动全国闻名，方知事态严重。真的好比《让子弹飞》里面的台词所形容：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;吃着火锅唱着歌，突然就让麻匪给劫了。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Life" scheme="http://yoursite.com/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>Lift Your Python Speed</title>
    <link href="http://yoursite.com/2020/02/09/Lift-Your-Python-Speed/"/>
    <id>http://yoursite.com/2020/02/09/Lift-Your-Python-Speed/</id>
    <published>2020-02-09T04:00:54.000Z</published>
    <updated>2020-09-23T17:55:12.026Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>The easiest way to get your code to run faster is to make it do less work. assuming you’ve already chosen good algorithms and you’ve reduced the amount of data you’re processing, the easiest way to execute fewer instructions is to compile your code down to machine code.</p></blockquote><a id="more"></a><p>In previous post <a href="/2020/02/01/Profiling-and-Optimizing/">Profiling and Optimizating</a> I talked about how to profiling and optimizing your code, apart from that, what can we do to make the code run faster?  </p><p>Python offers a number of options for this, including pure C-based compiling approaches like Cython, ShedSkin and Pythran; LLVM-based compiling via Numba; and the replacement virtual machine PyPy, which includes a built-in just-in-time(JIT) compiler. you need to balancethe requirements of code adaptability and team velocity when deciding which route to take.<br>In this post I will focus on PyPy and Cython.</p><h3 id="What-sort-of-speed-gains-are-possible"><a href="#What-sort-of-speed-gains-are-possible" class="headerlink" title="What sort of speed gains are possible?"></a>What sort of speed gains are possible?</h3><p>Python code that tends to run faster after compiling is probably mathematical and it probably has lots of loops that repeat the same operations many times. Inside these loops, you’re probably making lots of temporary objects.  </p><p>Code that calls out to external liraries (e.g regular expressions, string operations, calls to database libraries) is unlikely to show any speed up after compiling. Programs that are I/O-bound are also unlikely to show significant speedups. also if your code call <code>numpy</code> or <code>scipy</code>, it may not run any faster after compile to <code>C</code> code.  </p><p>Usually, some effort profiling and compiling brings a lot of reward, but continued effort tends to pay inscreasingly less. same to <em>100 meters race</em>, the faster you run, the harder you train.</p><h3 id="JIT-versus-AOT-compilers"><a href="#JIT-versus-AOT-compilers" class="headerlink" title="JIT versus AOT compilers"></a>JIT versus AOT compilers</h3><p>There are two kinds of compilers: JIT (just in time) and AOT (ahead of time).   </p><p>JIT compilers will step into code and compile it when you using it, you don’t need do much work, but it have a cold start problems. normally the second time run will be much faster. PyPy and Numba are the representations of JIT compilers.  </p><p>AOT compilers will compile code first into corresponding machine code, then this compiled lib can be used instantly. It needs you change code correspondingly. Cython, ShedSkin, Pythran are the representations of AOT compilers.  </p><table><thead><tr><th>AOT</th><th>JIT</th></tr></thead><tbody><tr><td>Cython</td><td>Numba</td></tr><tr><td>ShedSkin</td><td>PyPy</td></tr><tr><td>Pythran</td><td></td></tr></tbody></table><table><thead><tr><th></th><th>Python2</th><th>Python3</th></tr></thead><tbody><tr><td>Cython</td><td>Y</td><td>Y</td></tr><tr><td>ShedSkin</td><td>Y</td><td>N</td></tr><tr><td>Pythran</td><td>Y</td><td>Y</td></tr><tr><td>Numba</td><td>N</td><td>Y</td></tr><tr><td>PyPy</td><td>Y</td><td>Y</td></tr></tbody></table><h3 id="Why-does-type-information-help-code-run-faster"><a href="#Why-does-type-information-help-code-run-faster" class="headerlink" title="Why does type information help code run faster?"></a>Why does type information help code run faster?</h3><p>Python is dynamically typed – a variable can refer to an object of any type, and any line of code can change the type of the object that is referred to. this makes it difficult for the virtual machine to optimize how the code is executed at the machine code level, as it doesn’t know which fundamental datatype will be used for future operations. keeping the code generic mkes it run more slowly.  </p><p>Inside Python every fundamental object, like an integer, will be wrapped up in a higher level Python object. the higher level object has extra unctions like <code>__hash__</code> to assist with storage and <code>__str__</code> for printing.  </p><p>Inside a section of code that is CPU bound, it is often the case that tye types of variables dont change. this gives us an opportunity for static compilation and faster code execution.  </p><p>For mathmatical operations, we don’t need high level functions, even the Cpython’s reference counting GC. we can use machine level code directly. thus it will not interact with Python’s VM and directly run on your machine, this will save you lots of time. by doing this, we usually declare types or use <code>C</code> functions directly in Python code.</p><h3 id="Cython"><a href="#Cython" class="headerlink" title="Cython"></a>Cython</h3><p>Cython is a compiler that converts type-annotated Python into a compiled extension module. the type annotations are C-like. this extension can be imported as regular Python module using <code>import</code>. Getting started is simple, but it does have a learning curve that must be climbed with each additional elvel of complexity and optimization.  </p><p>It actually another programming language that can interact with Python. to make our code run faster, we need to anylize the code, find which part interact with Python, which don’t. and then optimize the part which interact with Python. by doing so we can find it easily:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cython -a find_duplicate_movies.pyx</span><br></pre></td></tr></table></figure><p><img src="/img/cython_annotation.png" alt="cython annotation"></p><p>** But it need a learning curve!!! **, i will cover it later.</p><h3 id="PyPy"><a href="#PyPy" class="headerlink" title="PyPy"></a>PyPy</h3><p>PyPy is an alternative implementation of the Python language that includes a tracing just-in-time compiler; it is compatibale with Python 2.7 and an experimental Python3.2 version is available.  </p><p>PyPy uses a different type of garbage collector to CPython, and this can cause some nonobvious behavior changes to your code. Whereas CPython uses reference counting, PyPy uses a modified mark and sweep approach that may clean up unused object much later. Both are correct implementations of the Python specification.  for example, when read file, CPython will close the file handler when it’s done due to reference counting. but for PyPy, it will close and flush data later.  </p><h3 id="Experiment"><a href="#Experiment" class="headerlink" title="Experiment"></a>Experiment</h3><p>here is the example from <a href="/2020/02/01/Profiling-and-Optimizing/">Profiling and Optimizing</a>, find duplicate movies in a list of movie titles from file. here is the data file which contains 6511101 lines: <a href="/img/titles.txt">titles.txt</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_movies</span><span class="params">(src)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(src) <span class="keyword">as</span> fd:</span><br><span class="line">        <span class="keyword">return</span> fd.read().splitlines()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_duplicate_movies</span><span class="params">(src=<span class="string">"titles.txt"</span>)</span>:</span></span><br><span class="line">    movies = read_movies(src)</span><br><span class="line">    movies = [movie.lower() <span class="keyword">for</span> movie <span class="keyword">in</span> movies]</span><br><span class="line">    movies.sort()</span><br><span class="line">    duplicates = []</span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> range(len(movies) - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> movies[idx] == movies[idx + <span class="number">1</span>]:</span><br><span class="line">            duplicates.append(movies[idx])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> duplicates</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    res = find_duplicate_movies()</span><br><span class="line">    <span class="keyword">print</span> res[<span class="number">0</span>:<span class="number">5</span>]</span><br></pre></td></tr></table></figure><p>run it with CPython directly, it use 10 seconds:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">time python find_duplicate_movies.py</span><br><span class="line"></span><br><span class="line">real0m10.187s</span><br><span class="line">user0m9.503s</span><br><span class="line">sys0m0.635s</span><br></pre></td></tr></table></figure><p>run it with PyPy, it use 7 seconds, much faster then CPython.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">time pypy find_duplicte_movies.py</span><br><span class="line"></span><br><span class="line">real0m7.340s</span><br><span class="line">user0m6.456s</span><br><span class="line">sys0m0.724s</span><br></pre></td></tr></table></figure><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href>High Performance Python – Chapter 7</a><br><a href="https://cython.org/#documentation" target="_blank" rel="noopener">Cython</a><br><a href="https://www.youtube.com/watch?v=_1MSX7V28Po" target="_blank" rel="noopener">Cython as a game changer</a><br><a href="https://www.youtube.com/watch?v=zx0wMxuh-wk" target="_blank" rel="noopener">Cython to speed up your Python code</a><br><a href="https://pypy.org/" target="_blank" rel="noopener">PyPy</a>  </p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;The easiest way to get your code to run faster is to make it do less work. assuming you’ve already chosen good algorithms and you’ve reduced the amount of data you’re processing, the easiest way to execute fewer instructions is to compile your code down to machine code.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Optimization" scheme="http://yoursite.com/tags/Optimization/"/>
    
  </entry>
  
  <entry>
    <title>技术驱动型公司</title>
    <link href="http://yoursite.com/2020/02/06/%E6%8A%80%E6%9C%AF%E9%A9%B1%E5%8A%A8%E5%9E%8B%E5%85%AC%E5%8F%B8/"/>
    <id>http://yoursite.com/2020/02/06/技术驱动型公司/</id>
    <published>2020-02-06T02:18:51.000Z</published>
    <updated>2020-09-23T17:55:12.030Z</updated>
    
    <content type="html"><![CDATA[<p>偶尔看到<code>二律背反</code>在知乎上回答问题<a href="https://www.zhihu.com/question/312019918/answer/608965942" target="_blank" rel="noopener"><code>作为 IT 行业的过来人，你有什么话想对后辈说的？</code></a>，感觉特别适合自己现在的处境，所以摘抄出来：</p><blockquote><p>1，世界上没有技术驱动型公司，因为在公司，一切都是需求优先的。<br>2，你做的好不好不取决于你多聪明，而取决于你是否愿意不断读书，不断学习，不断积累，不断思考。<br>3，公司是创造财富的地方，不是学校，你可以在工作中学习，但是不可以放下工作然后学习，除非你的工作已经做完了。<br>4，一定要想好在动手，想好的标志就是文档写好。<br>5，资本的运转是不能停的，因为一停下来损失的钱太多。所以资本富集的地方加班是常事。<br>6，现代管理学的精髓就是让每个人变得可替代。</p></blockquote><a id="more"></a><p>世界上没有技术驱动型公司，不论google、facebook，还是腾讯、阿里，都不是技术驱动型公司。<strong>因为技术不是源头，需求才是</strong>。因此一切技术问题，都要服从产品交付和市场反馈。所以，任何公司，都不可能以技术去驱动自身。人可以以技术驱动自己进步，但公司不行。一家公司可以以技术切入某个市场，但如果它想生存下去，就一定不能以技术为导向，坚持以技术为导向的公司的生命力为零，其下场有两个：破产或者在破产之前被收购。如果你真的很痴迷钻研技术，请读研读博最后留校或者进研究院让国家用纳税人的钱养你。  </p><p>资本富集的地方，人都得加班，加班的本质，是人跟着机器跑、人跟着钱跑；更为本质地说，资本富集的地方，人作为劳动力，也是资本的一种。即，人是资本而不是人本身。资本的运转是不能停的，因为停一下损失的钱太多了。中国、外国，都一样。知道发达国家为什么产业工人不加班吗？因为制造业已经不是这些国家主要创造财富的领域了。发达国家资本富集的地方是金融行业，所以西方国家的金融狗一样加班。劳动法？加班费？都不存在的。劳动法和加班费只有在资本离开这个市场后才能给你保证。一般公司的策略是：付给你高于其他行业的薪水、换取你“自愿”加班。不想加班的同学们，你们可以去考公务员或者去欧洲做IT，我保证你不加班、不但不用加班，你甚至会闲出病。  </p><p>IT是工科，不是理科，和IT行业相似度最高的行业是盖楼房。真的，相似度相当惊人。IT领域最重要的是经验而不是你有多聪明，不聪明的人或者更准确地说不适合做这个行业的人，大学毕业后就改行了。记住：你做得好不好，不取决于你是否聪明，而取决于你是否愿意不断读书不断学习和不断积累。因此，如果你打算投身这个行业而你还在学校，请抓紧一切时间多读书。  </p><p>公司是你创造财富的地方，公司不是学校。你可以在工作中学习，但你不能放下工作然后去学习除非你的工作已经做完了。  </p><p><strong>能大规模商用的技术，都不需要智商，否则这种技术就不可能规模化</strong>。某些程序员们，请停止你们的蜜汁自信。  </p><p>技术栈，一旦确立了，就很难改了。一个技术人员是如此，一家公司也是如此。根本原因是：每一个栈的size都太深了…就像是ulimit -s unlimited过一样。  </p><p>一个程序员，应该花80%的时间做代码设计、画UML图、画时序图，20%的时间写code和debug；菜鸟程序员的这个比例恰好是反的。一句话，不论这个需求有多紧急，你都一定要“想好再动手”；“想好”的标志就是设计文档写好了；文档一旦写好，写代码就是纯粹的无脑工作。 </p><p>写文档的目的是让你在code的时候，不需要停下来思考更不需要推倒重来。如果没有文档也可以做到这一点，你当然可以不写文档同时思考下自己水平这么高是不是可以要求升职加薪了……或者，你是不是在做无聊的if else编码工作？  </p><p>英语，很重要。能否使用英语查阅资料，是区分技术人员水平的重要指示之一。寄希望于“有人迟早会翻译成中文”的人是愚蠢的、是会被淘汰的。要有分享精神，不要担心你知道的东西告诉了别人你就没价值了<a href="https://www.zhihu.com/question/67169545/answer/807120993" target="_blank" rel="noopener">https://www.zhihu.com/question/67169545/answer/807120993</a>。<strong>你最大的价值在于你知道那些东西的过程，而不是那些东西本身</strong>。你愿意和别人分享别人自然也会愿意和你分享，最终达到1+1大于2的效果。不分享，就像一个失去了互联网的程序员，试问他还能创造多少价值？恐怕他连日常工作都无法展开了。持有“我把别人知道的都学会、我把自己知道的都藏起来别让别人学去”想法的人，其实是默认全世界只有你聪明别人都是傻瓜，这样的人，在信息传输成本高的时代，可以活下去，但是在今天这个时代，他们的路会越走越窄最后会自己走入死胡同。当然，如果你真的知道了了不得的黑科技，那就请你保护好自己的知识产权然后自己开公司玩吧。  </p><p>工作要有热情。  </p><p>智商决定你的起点情商决定你能走多远爬多高；混职场，靠的是情商。情商高就是：别人愿意和你一起工作、你有问题的时候别人愿意帮你。智商有时候可以稍微弥补一下情商但不起决定性的作用。  </p><p>现代管理学的精髓，就是让每个人（包括老板本人）都变得可替代。如果你觉得自己不可替代，要么是你的错觉，要么是你在一家管理非常原始的、摇摇欲坠马上要完蛋的公司。  </p><p>怎样让程序员变得可替代？三个字：写文档。不愿意写文档的程序员，应该立刻马上毫不犹豫地开掉。程序员工作创造的价值，至少一半是通过文档体现出来才对。“一个项目换一个人就要让项目大地震一下、解决bug换一个人就不行因为只有老人知道要改哪一行的哪个关键字”，这不说明这个项目所涉及的技术有多复杂、不说明这个老人是什么技术大牛，而只说明这个项目的项目经理是蠢货因为这个项目已经失控了。文档不是事无巨细的流水账，写文档以及组织文档是需要智商的、是需要架构师去设计的。美国的航天飞机那么复杂，但是在pilot手里的手册也就那么多，而这个手册可以在航天飞机出问题的时候协助pilot快速定位绝大多数问题。不可替代的打工者只有一种：以中高层领导的身份跟完了一个项目而且这个项目正处于大红大紫的阶段，公司为了防止你跳槽到竞争对手那里，愿意付给你薪水养着你天天在办公室喝茶。只要项目一直红着，公司就愿意一直养着你。读完这个答案后如果你觉得我是一个轻视技术的人，那么恭喜你，你和我一样，是一名钢精。钢精读别人的回答，永远不会去正面理解，而只会想尽一切办法找这个答案的漏洞。觉得我轻视技术的人，麻烦看下这个：<a href="https://www.zhihu.com/question/36729502/answer/613762292" target="_blank" rel="noopener">https://www.zhihu.com/question/36729502/answer/613762292</a></p><p>======== 下面展开一点谈文档和技术驱动 ========<br>“开发人员的文档的作用”： </p><p>给正在code的自己看、给几个月后已经忘记这个模块当初是怎么开发的自己看、给要接手自己工作的新人看、给周边有关联开发任务的同事看、给领导等有关人员看、产品出bug的时候用来和别人怼的武器。如果没有文档，这些工作量都会成倍增长。代码再精简再直观，也不可能有人类语言直观，谁觉得自己厉害到读代码和读人类语言写的文档速度一样快读地步，我给你个我上大学时候写的小程序，麻烦你读一下代码，看看你多长时间可以看明白：<a href="https://github.com/YvesZHI/FallingCode" target="_blank" rel="noopener">https://github.com/YvesZHI/FallingCode</a>这段代码本身并不复杂，应该说非常简单，但是没有文档……读读看吧。简而言之，文档，就像盖楼房的设计图，没有图纸，你是不能开始搬砖的。领导有没有给你看需求分析文档？有没有拿着需求分析文档给你宣讲你要做什么？没有？不干活；测试的同事有没有给你看测试用例文档？有没有给你宣讲？没有？不干活；你自己明白领导的意图了吗？明白测试同事的意图了吗？想明白后，开始想自己要开发的模块里的各个功能模块之间的关系，可以画时序图；时序图画完了，看看是否有（可能）频繁变化的模块/需求，如果有，请务必使用一些设计模式，如果要用设计模式，请务必画UML类图，如果没有频繁变化的模块/需求，请一定不要用设计模式；最后，看看在一个功能模块中，有没有逻辑比较复杂的地方，如果有，请画流程图；模块和模块之间有没有需要明确的协议？如果有，请把协议写出来。上面这一段话，就是你要写的文档，这个文档的读者主要是你，在你的模块出问题之前，别人通常不会读这个文档（不排除你的领导会要求看你这个文档）。如果你既不需要时序图又不需要类图又没什么协议需要明确，那么，你就可以不写这个文档。另外，如果这个文档写得好，你的代码是不需要任何注释的。  </p><p>“技术驱动”：  </p><p>一些朋友认为我对“技术驱动”有误解，对此我不想辩论了。题目是：作为IT行业的过来人，我有什么想对后辈说的。上面那段话就是我想对后辈说的。什么意思呢？就是告诉后辈，如果一家公司打着“我们是技术驱动型公司”的名号在招人，那么如果你决定要去这家公司，我劝你一定要想好考察好。为什么呢？因为我知道他的那句“技术驱动”很吸引你你想学东西，但是对小公司来说，它最大的任务是活下去，然后才是其他，我不是说小公司学不到东西，我只是说小公司很难很难做到真正的技术驱动；评论区有人坚持认为微软这种公司是技术驱动，这个问题我后面会专门补充，目前我只能说：我是没见过微软大张旗鼓地说自己是什么“技术驱动”公司然后忽悠新人。  </p><p>“技术驱动2”：  </p><p>看来有不少朋友愿意和我纠结这个“技术驱动”的问题，那我就和你们杠一杠。我以华为为例来说说。华为成功的内在原因，早就敲锣打鼓地告诉全世界了：以客户为中心，以奋斗者为本，长期艰苦奋斗，坚持自我批判。这四句话，没一句是直接和技术相关的。这里我先特别声明一下，我不是说，技术人员在华为就不会搞技术、不会提升自己的技术水平、华为的技术水平差。我绝不是这个意思。华为的技术，不需要我多说，全世界的人都是有目共睹的，华为公司的技术专利数就摆在那里，那是谁也抹杀不了的；华为公司里的技术大牛，多了去了；但在这里，我要说的还是第一段的意思：一个人可以以技术驱动，但一家公司不行。华为公司的核心理念，本质就是“成就客户”，你把客户成就了，你就也把自己成就了，华为不是先成就自己再去成就客户的公司。你去华为工作，你可以以技术驱动自己，但华为不能这样做。这一点和微软与IBM的合作极其相似：IBM说，你们微软现在搞的东西我愿意用，但是我需要你们给我搞个操作系统，这样我们才能继续合作。然后微软怎么做的呢？它马上购买了另外一家公司搞的DOS操作系统，然后直接授权给IBM使用。这里面有四个问题需要各位精钢们思考：1）为什么那家开发DOS的公司没能直接和IBM合作？2）微软购买DOS系统的钱哪里来的？3）微软为什么不自己开发操作系统？4）技术在前三个问题中的角色和作用是什么？至于评论区有朋友说Intel是技术驱动公司，我建议他去了解一下Intel为什么放弃了手机市场：重点关注Intel决定放弃手机市场的原因，然后你就会发现，这个原因的本质，就是一种技术情节的产物。Intel放弃手机市场与华为决定进军手机市场是截然不同的。华为本来是做基站、路由器和交换机的，这是它的主营业务。那么华为为什么决定进入手机市场？是什么原因驱使华为在没有任何技术积累的前提下进入手机市场、以至于最初华为的手机被华为员工戏称为“暖手宝”倒贴钱都没人愿意用但现在华为手机如此成功？所以，我还是那个观点：世界上没有技术驱动型公司。我本人就是程序员，我一直都以技术在驱动自己我一直都在努力提升自己的技术水平但是我还是要说：世界上没有技术驱动型公司。  </p><p>“技术驱动3”：  </p><p>继续怼一个新的team要开发一款软件。它首先要解决的问题，是在产品1.0开发出来并且赚到钱之前这个team的经费；其次，它要提前找好产品的客户群和可能存在的销售渠道并且做完相应的工作；再次，它要做产品规划，如什么时候出1.0版本的产品、哪个模块开发大概要多久、什么类型的问题可以暂时搁置什么类型的问题不能搁置要组织攻关组公关等（全是项目管理相关内容，和技术没有直接关系）。最后，进入产品开发阶段。一旦进入产品开发，就像工厂的流水线一样，是不可能出现什么导致产品开发进行不下去的技术难点的（否则技术leader就是白痴这种产品应该在头脑风暴阶段就被拍死才对），所以，“期望出现什么决定产品生死的技术难点然后自己nb闪闪地搞定”这种事情，是不可能发生的；同时，在开发过程中，难免出现各种意料之外的bug，比如，你负责的模块出现了三个bug，其中一个是必现问题且直接影响功能实现，那这个一定要搞定的，如果你搞不定，team会找其他老手和你一起攻关，攻关结果有两种，一种是bug解决了但是不知道为什么，另一种是bug解决了也知道了是为什么。对于第一种情况，team是不会让你“潜心研究几个月最后找到了原因”的，为什么？因为你还有后续工作要完成而这个bug已经解决了不影响用户使用了，什么时候才有可能让你继续跟进这个问题呢？1.0版本的产品市场反馈符合预期且公司决定要继续投入搞2.0版本 ———只有这个条件满足，你才有可能继续跟进这个问题，为什么是有可能呢？因为这个bug已经不影响客户使用了，没必要投入人力去搞了，你如果花几个月的时间去找这个bug的原因，那么请问：2.0版本的工作谁做？在很多项目中，类似这种“问题解决了但是不知道原因的bug”现象，是比较常见的，很多时候，直到这个产品生命周期结束，这些bug的原因都没有找到。因此，“期望碰到神秘bug然后自己潜心研究几个月终于把原因找到”这种事情，很多时候是不存在的。接着上面的“三个bug”继续：另外两个bug，是概率发生且发生概率很低。这个时候如果工期比较赶，公司会想办法绕过去这两个bug，比如定时重启服务器、定时清理缓存等（这些方法通常可以绕开低概率bug），不会给你“潜心研究三个月然后把bug解决”的机会的。什么时候才有可能让你继续研究这两个bug呢？和第一个bug一样，只有在后续继续开发，才有可能让你继续跟进。现在，请各位再重新品味一下“技术驱动”这个词。到底什么是技术驱动？其实这个词真正的含义就是：我们公司效益很好能养活nb的技术团队所以产品能不断迭代演进开发，随着产品的不断迭代，技术人员有可能会遇到一些其他公司遇不到的问题。所以，如果一家新成立的小公司说自己是技术驱动的……连1.0版本的产品都没有就敢说自己是技术驱动？你信吗？不管你信不信，反正我不信。简而言之，“技术驱动”的同义词就是“我们公司很有钱”+“我们公司不是炒股炒房而是做产品的公司”。至于为什么不直接这么说呢？这是因为这种说法不容易被十年寒窗苦读潜心研究技术的同学接受……被“技术驱动”迷惑的同学，其实就是读书读傻了，什么叫“读书读傻了”？就是把社会和学校等同成同样的东西……“很有钱的做IT产品的公司”，这个世界上当然是有的，但是这样的公司，根本不会用“技术驱动”这种词来忽悠新人。最后，隔行如隔山但隔行不隔理。如果你读完上面的东西，对自己所处的行业有了进一步的认识，我以为，是很正常的。</p><h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><p><a href="https://www.zhihu.com/question/312019918/answer/608965942" target="_blank" rel="noopener">作为 IT 行业的过来人，你有什么话想对后辈说的？</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;偶尔看到&lt;code&gt;二律背反&lt;/code&gt;在知乎上回答问题&lt;a href=&quot;https://www.zhihu.com/question/312019918/answer/608965942&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;作为 IT 行业的过来人，你有什么话想对后辈说的？&lt;/code&gt;&lt;/a&gt;，感觉特别适合自己现在的处境，所以摘抄出来：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1，世界上没有技术驱动型公司，因为在公司，一切都是需求优先的。&lt;br&gt;2，你做的好不好不取决于你多聪明，而取决于你是否愿意不断读书，不断学习，不断积累，不断思考。&lt;br&gt;3，公司是创造财富的地方，不是学校，你可以在工作中学习，但是不可以放下工作然后学习，除非你的工作已经做完了。&lt;br&gt;4，一定要想好在动手，想好的标志就是文档写好。&lt;br&gt;5，资本的运转是不能停的，因为一停下来损失的钱太多。所以资本富集的地方加班是常事。&lt;br&gt;6，现代管理学的精髓就是让每个人变得可替代。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="方法论" scheme="http://yoursite.com/tags/%E6%96%B9%E6%B3%95%E8%AE%BA/"/>
    
      <category term="认知" scheme="http://yoursite.com/tags/%E8%AE%A4%E7%9F%A5/"/>
    
  </entry>
  
  <entry>
    <title>Profiling-and-Optimizing</title>
    <link href="http://yoursite.com/2020/02/01/Profiling-and-Optimizing/"/>
    <id>http://yoursite.com/2020/02/01/Profiling-and-Optimizing/</id>
    <published>2020-02-01T11:48:12.000Z</published>
    <updated>2020-09-23T17:55:12.030Z</updated>
    
    <content type="html"><![CDATA[<p>大学时看到下面的说法，深以为然，因此一直写代码很少优化。那个时候考虑更多的是如何跑起来和跑正确的问题，很少涉及跑的更快更好的问题。</p><blockquote><p>过早的优化是万恶之源 –《计算机程序设计艺术》</p></blockquote><p>如今因为工作关系，我不得不考虑如何跑的更快，跑的更好了。</p><a id="more"></a><h3 id="如何跑的更快呢？"><a href="#如何跑的更快呢？" class="headerlink" title="如何跑的更快呢？"></a>如何跑的更快呢？</h3><p>当程序运行正确后，需要考虑如何跑的更快，占用资源更少。其最终的目的是用最少的硬件资源为更多的用户提供服务。这里大致分为两种途径：<br>1， 业务调整优化<br>2， 代码调整优化<br>业务调整优化一般需要调整业务，通过舍弃一些不太重要的功能来大幅提升当前主功能的速度，需要跨team合作。比如当前页面可能不太需要的一些数据（获取比较耗时）可以舍弃。接口或者页面处理的数据少了，速度就会相应的提升。<br>代码调整优化则是开发者在不影响当前业务功能的前提下，内部调整优化代码逻辑。整个过程对终端用户是透明的。  </p><p>本文我主要说明代码优化，这个是我们开发者在不依赖其它外部资源情况下就可以进行的。</p><h3 id="Profiling"><a href="#Profiling" class="headerlink" title="Profiling"></a>Profiling</h3><p>我要优化代码，那该从哪里优化呢？首先当然是定位，定位需要优化的地方。第一种方法是大致评估代码中哪一个模块或者函数比较耗时，然后重点分析。第二种方法是借助工具量化评估代码耗费资源情况（CPU，Mem），根据评估列表结果优化。第一种方法比较主观，因为不同的开发者往往评估的有差距，或者大型项目开发者对其它模块不太熟悉，无法正确评估。而第二种方法比较客观，通过监控统计代码耗费资源的情况量化其性能，开发者可以很容易从统计的结果中得出代码哪一块比较耗费资源。第二种方法就是Profiling。</p><p>Profiling 一般使用下面的工具：<br>1， Python装饰器，用来测量函数耗时</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timefn</span><span class="params">(fn)</span>:</span></span><br><span class="line"><span class="meta">    @wraps(fn)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">measure_time</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        t1 = time.time()</span><br><span class="line">        result = fn(*args, **kwargs)</span><br><span class="line">        t2 = time.time()</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"@timefn:"</span> + fn.func_name + <span class="string">" took "</span> + str(t2 - t1) + <span class="string">" senconds"</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> measure_time</span><br><span class="line"></span><br><span class="line"><span class="meta">@timefn</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_to_measure</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>2， Python Module <code>timeit</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python -m timeit -n <span class="number">5</span> -r <span class="number">5</span> ...</span><br><span class="line"></span><br><span class="line"><span class="number">5</span> loops, best of <span class="number">5</span>: <span class="number">13.1</span> sec per loop</span><br></pre></td></tr></table></figure><p>3， Unix Time Command</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/time -p python scripts.py</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">real 13.46</span><br><span class="line">user 13.40</span><br><span class="line">sys 0.04</span><br></pre></td></tr></table></figure><p>4, cProfile module<br>可以查看当前程序中用户定义函数或者Python内部函数的调用及耗时情况。一般用来定位函数层级。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">python -m cProfile -s cumulative problem1.py </span><br><span class="line"></span><br><span class="line">         66716 <span class="keyword">function</span> calls <span class="keyword">in</span> 9.435 seconds</span><br><span class="line"></span><br><span class="line">   Ordered by: standard name</span><br><span class="line"></span><br><span class="line">   ncalls  tottime  percall  cumtime  percall filename:lineno(<span class="keyword">function</span>)</span><br><span class="line">        3    0.000    0.000    0.000    0.000 functools.py:17(update_wrapper)</span><br><span class="line">        3    0.000    0.000    0.000    0.000 functools.py:39(wraps)</span><br><span class="line">        1    0.000    0.000    9.435    9.435 problem1.py:1(&lt;module&gt;)</span><br><span class="line">        1    9.407    9.407    9.408    9.408 problem1.py:20(merge_two_list)</span><br><span class="line">        1    0.019    0.019    0.025    0.025 problem1.py:4(get_muliply_res)</span><br><span class="line">        1    0.001    0.001    0.001    0.001 timing_decorators.py:1(&lt;module&gt;)</span><br><span class="line">        3    0.000    0.000    0.000    0.000 timing_decorators.py:5(timefn)</span><br><span class="line">        2    0.000    0.000    9.433    4.717 timing_decorators.py:6(measure_time)</span><br><span class="line">       15    0.000    0.000    0.000    0.000 &#123;getattr&#125;</span><br><span class="line">    66665    0.005    0.000    0.005    0.000 &#123;method <span class="string">'append'</span> of <span class="string">'list'</span> objects&#125;</span><br><span class="line">        1    0.000    0.000    0.000    0.000 &#123;method <span class="string">'disable'</span> of <span class="string">'_lsprof.Profiler'</span> objects&#125;</span><br><span class="line">        1    0.000    0.000    0.000    0.000 &#123;method <span class="string">'format'</span> of <span class="string">'str'</span> objects&#125;</span><br><span class="line">        3    0.000    0.000    0.000    0.000 &#123;method <span class="string">'update'</span> of <span class="string">'dict'</span> objects&#125;</span><br><span class="line">        2    0.003    0.002    0.003    0.002 &#123;range&#125;</span><br><span class="line">        9    0.000    0.000    0.000    0.000 &#123;setattr&#125;</span><br><span class="line">        1    0.000    0.000    0.000    0.000 &#123;sum&#125;</span><br><span class="line">        4    0.000    0.000    0.000    0.000 &#123;time.time&#125;</span><br></pre></td></tr></table></figure><p>5, line_profiler module<br>上述cProfile定位到函数级别后，可以使用line_profiler定位到函数中具体某一行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">kernprof -l -v problem1.py </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Total time: 9.80845 s</span><br><span class="line">File: problem1.py</span><br><span class="line">Function: merge_two_list at line 20</span><br><span class="line"></span><br><span class="line">Line <span class="comment">#      Hits         Time  Per Hit   % Time  Line Contents</span></span><br><span class="line">==============================================================</span><br><span class="line">    20                                           @timefn</span><br><span class="line">    21                                           @profile</span><br><span class="line">    22                                           def merge_two_list(small_lst, big_lst):</span><br><span class="line">    23                                               <span class="string">""</span><span class="string">" merge two list into one, remove duplicate elements "</span><span class="string">""</span></span><br><span class="line">    24         1        158.0    158.0      0.0      res = big_lst</span><br><span class="line">    25     20000       7026.0      0.4      0.1      <span class="keyword">for</span> ele <span class="keyword">in</span> small_lst:</span><br><span class="line">    26     19999    9792981.0    489.7     99.8          <span class="keyword">if</span> ele not <span class="keyword">in</span> res:</span><br><span class="line">    27     13333       8285.0      0.6      0.1              res.append(ele)</span><br><span class="line">    28</span><br><span class="line">    29         1          0.0      0.0      0.0      <span class="built_in">return</span> res</span><br></pre></td></tr></table></figure><p>6, memory_profiler<br>前面的工具都是测量程序运行耗时的，这个工具用来测量内存占用情况。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">python -m memory_profiler problem1.py</span><br><span class="line"></span><br><span class="line">Filename: problem1.py</span><br><span class="line"></span><br><span class="line">Line <span class="comment">#    Mem usage    Increment   Line Contents</span></span><br><span class="line">================================================</span><br><span class="line">    20   30.691 MiB   30.691 MiB   @timefn</span><br><span class="line">    21                             @profile</span><br><span class="line">    22                             def merge_two_list(small_lst, big_lst):</span><br><span class="line">    23                                 <span class="string">""</span><span class="string">" merge two list into one, remove duplicate elements "</span><span class="string">""</span></span><br><span class="line">    24   30.695 MiB    0.004 MiB       res = big_lst</span><br><span class="line">    25   30.977 MiB    0.000 MiB       <span class="keyword">for</span> ele <span class="keyword">in</span> small_lst:</span><br><span class="line">    26   30.977 MiB    0.168 MiB           <span class="keyword">if</span> ele not <span class="keyword">in</span> res:</span><br><span class="line">    27   30.977 MiB    0.004 MiB               res.append(ele)</span><br><span class="line">    28</span><br><span class="line">    29   30.977 MiB    0.000 MiB       <span class="built_in">return</span> res</span><br></pre></td></tr></table></figure><p>还有其它工具这里将不赘述。</p><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><p>从1w个电影title中找出重复的title并打印出来，数据如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Carmencita</span><br><span class="line">Le clown et ses chiens</span><br><span class="line">Pauvre Pierrot</span><br><span class="line">Un bon bock</span><br><span class="line">Blacksmith Scene</span><br><span class="line">Chinese Opium Den</span><br><span class="line">Corbett and Courtney Before the Kinetograph</span><br><span class="line">Edison Kinetoscopic Record of a Sneeze</span><br><span class="line">Miss Jerry</span><br><span class="line">Exiting the Factory</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><a href="/img/titles_1w.txt">titles_1w.txt</a></p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_movies</span><span class="params">(src)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(src) <span class="keyword">as</span> fd:</span><br><span class="line">        <span class="keyword">return</span> fd.read().splitlines()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_duplicate</span><span class="params">(needle, haystack)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> movie <span class="keyword">in</span> haystack:</span><br><span class="line">        <span class="keyword">if</span> needle.lower() == movie.lower():</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_duplicate_movies</span><span class="params">(src=<span class="string">"titles_1w.txt"</span>)</span>:</span></span><br><span class="line">    movies = read_movies(src)</span><br><span class="line">    duplicates = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> movies:</span><br><span class="line">        movie = movies.pop()</span><br><span class="line">        <span class="keyword">if</span> movie <span class="keyword">in</span> movies:</span><br><span class="line">            duplicates.append(movie)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> duplicates</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    res = find_duplicate_movies()</span><br><span class="line">    <span class="keyword">print</span> res</span><br></pre></td></tr></table></figure><p>运行上面的脚本发现耗时35秒</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">python -m cProfile find_duplicate_movies.py</span><br><span class="line"></span><br><span class="line">         97560705 <span class="keyword">function</span> calls <span class="keyword">in</span> 35.499 seconds</span><br><span class="line"></span><br><span class="line">   Ordered by: standard name</span><br><span class="line"></span><br><span class="line">   ncalls  tottime  percall  cumtime  percall filename:lineno(<span class="keyword">function</span>)</span><br><span class="line">        1    0.000    0.000   35.499   35.499 find_duplicate_movies.py:1(&lt;module&gt;)</span><br><span class="line">        1    0.000    0.000    0.001    0.001 find_duplicate_movies.py:1(read_movies)</span><br><span class="line">        1    0.013    0.013   35.499   35.499 find_duplicate_movies.py:13(find_duplicate_movies)</span><br><span class="line">    10001   12.619    0.001   35.482    0.004 find_duplicate_movies.py:6(is_duplicate)</span><br><span class="line">      376    0.000    0.000    0.000    0.000 &#123;method <span class="string">'append'</span> of <span class="string">'list'</span> objects&#125;</span><br><span class="line">        1    0.000    0.000    0.000    0.000 &#123;method <span class="string">'disable'</span> of <span class="string">'_lsprof.Profiler'</span> objects&#125;</span><br><span class="line"> 97540320   22.863    0.000   22.863    0.000 &#123;method <span class="string">'lower'</span> of <span class="string">'str'</span> objects&#125;</span><br><span class="line">    10001    0.004    0.000    0.004    0.000 &#123;method <span class="string">'pop'</span> of <span class="string">'list'</span> objects&#125;</span><br><span class="line">        1    0.000    0.000    0.000    0.000 &#123;method <span class="string">'read'</span> of <span class="string">'file'</span> objects&#125;</span><br><span class="line">        1    0.001    0.001    0.001    0.001 &#123;method <span class="string">'splitlines'</span> of <span class="string">'str'</span> objects&#125;</span><br><span class="line">        1    0.000    0.000    0.000    0.000 &#123;open&#125;</span><br></pre></td></tr></table></figure><p>分析cProfile的结果，可以看出耗时发生在两个函数调用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ncalls  tottime  percall  cumtime  percall filename:lineno(<span class="keyword">function</span>)</span><br><span class="line">10001   12.619    0.001   35.482    0.004 find_duplicate_movies.py:6(is_duplicate)</span><br><span class="line">97540320   22.863    0.000   22.863    0.000 &#123;method <span class="string">'lower'</span> of <span class="string">'str'</span> objects&#125;</span><br></pre></td></tr></table></figure><h4 id="第一次优化"><a href="#第一次优化" class="headerlink" title="第一次优化"></a>第一次优化</h4><p>对应代码中的函数：<code>is_duplicate</code> 和 build-in: <code>lower</code>，可以看出string的<code>lower</code>函数比较耗费时间，花费了<strong>22.863</strong>秒。我们可以在读入movie title后直接转化成lower case，进而防止在<code>is_duplicate</code>中2次调用<code>lower</code>。改进后的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_movies</span><span class="params">(src)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(src) <span class="keyword">as</span> fd:</span><br><span class="line">        <span class="keyword">return</span> fd.read().splitlines()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_duplicate</span><span class="params">(needle, haystack)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> movie <span class="keyword">in</span> haystack:</span><br><span class="line">        <span class="keyword">if</span> needle == movie:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_duplicate_movies</span><span class="params">(src=<span class="string">"titles_1w.txt"</span>)</span>:</span></span><br><span class="line">    movies = read_movies(src)</span><br><span class="line">    movies = [movie.lower() <span class="keyword">for</span> movie <span class="keyword">in</span> movies]</span><br><span class="line">    duplicates = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> movies:</span><br><span class="line">        movie = movies.pop()</span><br><span class="line">        <span class="keyword">if</span> is_duplicate(movie, movies):</span><br><span class="line">            duplicates.append(movie)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> duplicates</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    res = find_duplicate_movies()</span><br><span class="line">    <span class="keyword">print</span> res[<span class="number">0</span>:<span class="number">5</span>]</span><br></pre></td></tr></table></figure><p>运行改进后的程序，结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">python -m cProfile find_duplicate_movies.py</span><br><span class="line"></span><br><span class="line">         30386 <span class="keyword">function</span> calls <span class="keyword">in</span> 1.175 seconds</span><br><span class="line"></span><br><span class="line">   Ordered by: standard name</span><br><span class="line"></span><br><span class="line">   ncalls  tottime  percall  cumtime  percall filename:lineno(<span class="keyword">function</span>)</span><br><span class="line">        1    0.000    0.000    1.175    1.175 find_duplicate_movies.py:1(&lt;module&gt;)</span><br><span class="line">        1    0.000    0.000    0.001    0.001 find_duplicate_movies.py:1(read_movies)</span><br><span class="line">        1    0.006    0.006    1.175    1.175 find_duplicate_movies.py:13(find_duplicate_movies)</span><br><span class="line">    10001    1.163    0.000    1.163    0.000 find_duplicate_movies.py:6(is_duplicate)</span><br><span class="line">      376    0.000    0.000    0.000    0.000 &#123;method <span class="string">'append'</span> of <span class="string">'list'</span> objects&#125;</span><br><span class="line">        1    0.000    0.000    0.000    0.000 &#123;method <span class="string">'disable'</span> of <span class="string">'_lsprof.Profiler'</span> objects&#125;</span><br><span class="line">    10001    0.003    0.000    0.003    0.000 &#123;method <span class="string">'lower'</span> of <span class="string">'str'</span> objects&#125;</span><br><span class="line">    10001    0.001    0.000    0.001    0.000 &#123;method <span class="string">'pop'</span> of <span class="string">'list'</span> objects&#125;</span><br><span class="line">        1    0.000    0.000    0.000    0.000 &#123;method <span class="string">'read'</span> of <span class="string">'file'</span> objects&#125;</span><br><span class="line">        1    0.001    0.001    0.001    0.001 &#123;method <span class="string">'splitlines'</span> of <span class="string">'str'</span> objects&#125;</span><br><span class="line">        1    0.000    0.000    0.000    0.000 &#123;open&#125;</span><br></pre></td></tr></table></figure><p>可以看出，总耗时下降到<strong>1.175</strong>秒。</p><h4 id="第二次优化"><a href="#第二次优化" class="headerlink" title="第二次优化"></a>第二次优化</h4><p>从上面profiling结果可以看出主要耗时函数为：<code>is_duplicate</code>。这里去掉is_duplicate 函数调用，直接在<code>find_duplicate_movies</code>中判断当前movie是否在剩余movies中，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_movies</span><span class="params">(src)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(src) <span class="keyword">as</span> fd:</span><br><span class="line">        <span class="keyword">return</span> fd.read().splitlines()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_duplicate_movies</span><span class="params">(src=<span class="string">"titles_1w.txt"</span>)</span>:</span></span><br><span class="line">    movies = read_movies(src)</span><br><span class="line">    movies = [movie.lower() <span class="keyword">for</span> movie <span class="keyword">in</span> movies]</span><br><span class="line">    duplicates = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> movies:</span><br><span class="line">        movie = movies.pop()</span><br><span class="line">        <span class="keyword">if</span> movie <span class="keyword">in</span> movies:</span><br><span class="line">            duplicates.append(movie)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> duplicates</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    res = find_duplicate_movies()</span><br><span class="line">    <span class="keyword">print</span> res[<span class="number">0</span>:<span class="number">5</span>]</span><br></pre></td></tr></table></figure><p>运行改进后的程序，结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">python -m cProfile find_duplicate_movies.py</span><br><span class="line"></span><br><span class="line">         20385 <span class="keyword">function</span> calls <span class="keyword">in</span> 0.463 seconds</span><br><span class="line"></span><br><span class="line">   Ordered by: standard name</span><br><span class="line"></span><br><span class="line">   ncalls  tottime  percall  cumtime  percall filename:lineno(<span class="keyword">function</span>)</span><br><span class="line">        1    0.000    0.000    0.463    0.463 find_duplicate_movies.py:1(&lt;module&gt;)</span><br><span class="line">        1    0.000    0.000    0.001    0.001 find_duplicate_movies.py:1(read_movies)</span><br><span class="line">        1    0.457    0.457    0.463    0.463 find_duplicate_movies.py:13(find_duplicate_movies)</span><br><span class="line">      376    0.000    0.000    0.000    0.000 &#123;method <span class="string">'append'</span> of <span class="string">'list'</span> objects&#125;</span><br><span class="line">        1    0.000    0.000    0.000    0.000 &#123;method <span class="string">'disable'</span> of <span class="string">'_lsprof.Profiler'</span> objects&#125;</span><br><span class="line">    10001    0.003    0.000    0.003    0.000 &#123;method <span class="string">'lower'</span> of <span class="string">'str'</span> objects&#125;</span><br><span class="line">    10001    0.001    0.000    0.001    0.000 &#123;method <span class="string">'pop'</span> of <span class="string">'list'</span> objects&#125;</span><br><span class="line">        1    0.000    0.000    0.000    0.000 &#123;method <span class="string">'read'</span> of <span class="string">'file'</span> objects&#125;</span><br><span class="line">        1    0.001    0.001    0.001    0.001 &#123;method <span class="string">'splitlines'</span> of <span class="string">'str'</span> objects&#125;</span><br><span class="line">        1    0.000    0.000    0.000    0.000 &#123;open&#125;</span><br></pre></td></tr></table></figure><p>总耗时下降到<strong>0.463</strong>秒。</p><h4 id="第三次优化"><a href="#第三次优化" class="headerlink" title="第三次优化"></a>第三次优化</h4><p>上述判断是否重复是通过pop出一个title后，然后检查title是否在剩余的list中。这里我们可以使用更高效的方法，先将list排序，那么相同的title将会在list中紧挨着，这个时候只要循环排序后的数组，比较idx和idx+1的元素即可。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_movies</span><span class="params">(src)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(src) <span class="keyword">as</span> fd:</span><br><span class="line">        <span class="keyword">return</span> fd.read().splitlines()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_duplicate_movies</span><span class="params">(src=<span class="string">"titles_1w.txt"</span>)</span>:</span></span><br><span class="line">    movies = read_movies(src)</span><br><span class="line">    movies = [movie.lower() <span class="keyword">for</span> movie <span class="keyword">in</span> movies]</span><br><span class="line">    movies.sort()</span><br><span class="line">    duplicates = []</span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> range(len(movies) - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> movies[idx] == movies[idx + <span class="number">1</span>]:</span><br><span class="line">            duplicates.append(movies[idx])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> duplicates</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    res = find_duplicate_movies()</span><br><span class="line">    <span class="keyword">print</span> res[<span class="number">0</span>:<span class="number">5</span>]</span><br></pre></td></tr></table></figure><p>运行改进后的程序，结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">python -m cProfile find_duplicate_movies.py</span><br><span class="line"></span><br><span class="line">         10387 <span class="keyword">function</span> calls <span class="keyword">in</span> 0.010 seconds</span><br><span class="line"></span><br><span class="line">   Ordered by: standard name</span><br><span class="line"></span><br><span class="line">   ncalls  tottime  percall  cumtime  percall filename:lineno(<span class="keyword">function</span>)</span><br><span class="line">        1    0.000    0.000    0.010    0.010 find_duplicate_movies.py:1(&lt;module&gt;)</span><br><span class="line">        1    0.000    0.000    0.001    0.001 find_duplicate_movies.py:1(read_movies)</span><br><span class="line">        1    0.002    0.002    0.010    0.010 find_duplicate_movies.py:13(find_duplicate_movies)</span><br><span class="line">        1    0.000    0.000    0.000    0.000 &#123;len&#125;</span><br><span class="line">      376    0.000    0.000    0.000    0.000 &#123;method <span class="string">'append'</span> of <span class="string">'list'</span> objects&#125;</span><br><span class="line">        1    0.000    0.000    0.000    0.000 &#123;method <span class="string">'disable'</span> of <span class="string">'_lsprof.Profiler'</span> objects&#125;</span><br><span class="line">    10001    0.003    0.000    0.003    0.000 &#123;method <span class="string">'lower'</span> of <span class="string">'str'</span> objects&#125;</span><br><span class="line">        1    0.000    0.000    0.000    0.000 &#123;method <span class="string">'read'</span> of <span class="string">'file'</span> objects&#125;</span><br><span class="line">        1    0.003    0.003    0.003    0.003 &#123;method <span class="string">'sort'</span> of <span class="string">'list'</span> objects&#125;</span><br><span class="line">        1    0.001    0.001    0.001    0.001 &#123;method <span class="string">'splitlines'</span> of <span class="string">'str'</span> objects&#125;</span><br><span class="line">        1    0.000    0.000    0.000    0.000 &#123;open&#125;</span><br><span class="line">        1    0.000    0.000    0.000    0.000 &#123;range&#125;</span><br></pre></td></tr></table></figure><p>总耗时下降到<strong>0.010</strong>秒。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大学时看到下面的说法，深以为然，因此一直写代码很少优化。那个时候考虑更多的是如何跑起来和跑正确的问题，很少涉及跑的更快更好的问题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;过早的优化是万恶之源 –《计算机程序设计艺术》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如今因为工作关系，我不得不考虑如何跑的更快，跑的更好了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Optimization" scheme="http://yoursite.com/tags/Optimization/"/>
    
      <category term="Profiling" scheme="http://yoursite.com/tags/Profiling/"/>
    
  </entry>
  
  <entry>
    <title>Cache For Software Engineer</title>
    <link href="http://yoursite.com/2020/01/17/Cache-For-Software-Engineer/"/>
    <id>http://yoursite.com/2020/01/17/Cache-For-Software-Engineer/</id>
    <published>2020-01-17T07:00:00.000Z</published>
    <updated>2020-09-23T17:55:12.026Z</updated>
    
    <content type="html"><![CDATA[<p>In this post i am gonna talk about cache, specifically on application level, will not cover the internals of cache such as Redis/Memcache implementation etc. will cover following topics:  </p><ul><li>What is cache</li><li>Usage senarios</li><li>Cache Types</li><li>Cache Patterns</li><li>3 major problems and solutions in cache world<a id="more"></a></li></ul><h3 id="What-is-cache"><a href="#What-is-cache" class="headerlink" title="What is cache"></a>What is cache</h3><blockquote><p>cache is data redundancy, to achieve higher data access speed.</p></blockquote><p>normally we use memory in current process or use Redis/Memcache to store data instead of directly access DB or other data source to retrieve data. as we all know that memory is much faster than disk or network IO. so use memory as a cache storage is a reasonable choice.</p><h3 id="Usage-senarios"><a href="#Usage-senarios" class="headerlink" title="Usage senarios"></a>Usage senarios</h3><p>what’s good senarios with cahce and bad with cache?</p><p>Good<br>1, low real-time requirements data<br>2, high concurrency, like home page for ecomerce website<br>3, hot zone data, like most viewed products<br>4, low consitency requirements  </p><p>Bad<br>1, high consistency requirements, like wallet withdraw<br>2, rarelly accessed data<br>3, data size too big, like the data is about 50M<br>4, admin api</p><h3 id="Cache-Types"><a href="#Cache-Types" class="headerlink" title="Cache Types"></a>Cache Types</h3><p>To summarize, there are following cache types:</p><pre><code>+------------------------------+   |                              |   |        Browser Cache         |   |                              |   +------------------------------+   +-----------------------------+    |                             |    |             CDN             |    |                             |    +-----------------------------+    +-----------------------------+    |                             |    |      Proxy Cache(Nginx)     |    |                             |    +-----------------------------+    +-----------------------------+    |                             |    |  Distributed Cache(Redis)   |    |                             |    +-----------------------------+    +-----------------------------+    |                             |    |      In Memory Cache        |    |                             |    +-----------------------------+    +-----------------------------+    |                             |    |         Database            |    |                             |    +-----------------------------+     </code></pre><p>As a back end developer, mostly we focus on <code>Distributed Cache</code> and <code>In memory cache</code>.</p><h3 id="cache-Patterns"><a href="#cache-Patterns" class="headerlink" title="cache Patterns"></a>cache Patterns</h3><h4 id="Cache-aside"><a href="#Cache-aside" class="headerlink" title="Cache aside"></a>Cache aside</h4><p>Application will operate DB and cache the same time. as following fig shows:<br><img src="/img/cache_aside.png" alt="cache aside"><br>1st, application first query cache, if hit, then use the data from cache<br>2nd, if 1st step not hit, query database directly, return the data<br>3rd, after 2nd step, set the cache with data from database to cache</p><p><img src="/img/cache_aside_read_write.png" alt="cache aside read write"></p><h4 id="Read-Write-through"><a href="#Read-Write-through" class="headerlink" title="Read/Write through"></a>Read/Write through</h4><p>normally application only interact with cache, it is the cache proxy’s responsibility to sync data between cache and database.</p><p><img src="/img/read_write_through.png" alt="read write through"></p><h4 id="Write-behind"><a href="#Write-behind" class="headerlink" title="Write behind"></a>Write behind</h4><p>different from read/write through, data is sync to db from cache through cron job or message queue.</p><p><img src="/img/write_back.png" alt="write back"></p><p>For read-heavy task, <code>cache aside</code> and <code>read/write through</code> is a better choice, for write heavy task, <code>write behind</code> is a better choice.</p><h3 id="3-major-problems-and-solutions-in-cache-world"><a href="#3-major-problems-and-solutions-in-cache-world" class="headerlink" title="3 major problems and solutions in cache world"></a>3 major problems and solutions in cache world</h3><p>1, cache avalance<br>massive cache keys are expired or cache system down, thus lots of cache missing, then goes to database.<br>set different ttl for different keys, or deploy cache system as cluster.</p><p>2, cache breakdown<br>a cache key didn’t hit, thus goes to database. sometimes this key will corresponds to high concurrency. thus lots of query goes to database.<br>set a gloable lock when query database for same key to gaurateen only a query goes to database.</p><p>3, cache penetration<br>the key not existing in cache, thus whenever you query, it will miss.<br>set this key to cache with value None.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In this post i am gonna talk about cache, specifically on application level, will not cover the internals of cache such as Redis/Memcache implementation etc. will cover following topics:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What is cache&lt;/li&gt;
&lt;li&gt;Usage senarios&lt;/li&gt;
&lt;li&gt;Cache Types&lt;/li&gt;
&lt;li&gt;Cache Patterns&lt;/li&gt;
&lt;li&gt;3 major problems and solutions in cache world
    
    </summary>
    
      <category term="Cache" scheme="http://yoursite.com/categories/Cache/"/>
    
      <category term="Software Engineer" scheme="http://yoursite.com/categories/Cache/Software-Engineer/"/>
    
    
      <category term="Cache" scheme="http://yoursite.com/tags/Cache/"/>
    
      <category term="Backend" scheme="http://yoursite.com/tags/Backend/"/>
    
      <category term="Software Engineer" scheme="http://yoursite.com/tags/Software-Engineer/"/>
    
      <category term="Devlopper" scheme="http://yoursite.com/tags/Devlopper/"/>
    
  </entry>
  
  <entry>
    <title>Template Engine Internal</title>
    <link href="http://yoursite.com/2017/07/09/Template-Engine-Internal/"/>
    <id>http://yoursite.com/2017/07/09/Template-Engine-Internal/</id>
    <published>2017-07-09T08:38:28.000Z</published>
    <updated>2020-09-23T17:55:12.030Z</updated>
    
    <content type="html"><![CDATA[<ul><li>How template engine works? the basic principle behind this.</li><li>Implement a template engine</li><li>What about Jinjia2?<a id="more"></a></li></ul><h4 id="Basic-principle"><a href="#Basic-principle" class="headerlink" title="Basic principle"></a>Basic principle</h4><h5 id="Why-we-need-a-template-or-template-engine"><a href="#Why-we-need-a-template-or-template-engine" class="headerlink" title="Why we need a template or template engine?"></a>Why we need a template or template engine?</h5><p>Most programs contains lots of logic but little bit of textual data, and programming languages like Python, Java are designed to do this kind of job. but some programming tasks requires little logic but lots of textual data processing, for this kind of task, we need a better tool that suite for text-heavy problems – such a tool named Template(Engine).<br>Note: you may wonder that you can still use programming languages like Clang processing text-heavy tasks, like assembling the html source code for the client. i will say that is okay but not efficient, plus your code will be a messy with statements and string literals. don’t we programmers like modualize everything and make programming easier afterwards?</p><h5 id="Template-the-big-picture"><a href="#Template-the-big-picture" class="headerlink" title="Template: the big picture"></a>Template: the big picture</h5><p>Template is suite for text heavy tasks, especially where web server application need to return HTML page to the client. so basiclly it need to turn following template into a html string:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>Template<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Hello &#123;&#123;username&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>Template<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Hello archer<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>How can we achieve this? there are two basic ways:</p><ul><li>with string substitution</li><li>code execution</li></ul><p>If chose string substitution, then we can use Python’s format() replace the username with the value we want as follows:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line">Template_Page = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">  &lt;head&gt;&lt;title&gt;Template&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">  &lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;h3&gt;Hello &#123;&#123;username&#125;&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="string">  &lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">html = Template_Page.format(username=<span class="string">'string substitution'</span>)</span><br></pre></td></tr></table></figure><p>Here is the output of the variable html:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;&lt;title&gt;Template&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h3&gt;Hello string substitution&lt;/h3&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>If we chose to use code execution, then we need to convert this template html into a corresponding Python function, then we call this function with right parameters.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># string format</span></span><br><span class="line">fuck_str = <span class="string">"""</span></span><br><span class="line"><span class="string">def render_function(context):</span></span><br><span class="line"><span class="string">    c_person = context['username']</span></span><br><span class="line"><span class="string">    result = []</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    result.append('&lt;html&gt;\n&lt;head&gt;&lt;title&gt;Template&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n&lt;h3&gt;')</span></span><br><span class="line"><span class="string">    result.append(str(c_person))</span></span><br><span class="line"><span class="string">    result.append('&lt;/h3&gt;\n&lt;/body&gt;\n&lt;/html&gt;')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    return ''.join(result)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">namespace = &#123;&#125;</span><br><span class="line">exec(fuck_str, namespace) <span class="comment"># will put render_function as a function into namespace, like JS's evil eval which will execute a string as a statements</span></span><br><span class="line">html = namespace.get(<span class="string">'render_function'</span>)(&#123;<span class="string">'username'</span>: <span class="string">'code execution'</span>&#125;)</span><br><span class="line"><span class="keyword">print</span> html</span><br></pre></td></tr></table></figure><p>Should got this</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>Template<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Hello code execution<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>As you can see from upper, code execution tries to take template’s username as a Python variable and will use it’s value instead of the variable name when assembling the html string.</p><p>A template file is like a programming source file, and template engine are like programming interpreter or a compiler. it takes template file in and produce the corresponding html. normally a template contains two parts, Static Part and Dynamic Part, template engine will interpret Dynamic Part with real data, like in upper example will replace username with its real value.</p><p>What u just saw is a very simple illustration? there are a lot of things need to take into consideration when you want to totally understand the Template Engine. like how to interpret or support loop controls, what about if else? these are very often used statements in Programming languages like Python.</p><p>Some engine just use string substitution, some use code execution totally, some mixed them up, so all engines sits between these two basic techs as following shows:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">code execution                                                   string substitution</span><br><span class="line">&lt;---------------------------------------|-------------------------------------------&gt;</span><br><span class="line">moko                       Jinja2 | Django | etc ...           .format(**kwargs)</span><br></pre></td></tr></table></figure><h4 id="Implementation-Detail"><a href="#Implementation-Detail" class="headerlink" title="Implementation Detail"></a>Implementation Detail</h4><p>The goal is turn following template(html mixed string) into real html string as you see in Jinja2. so question is how can we do this conversion? especially how can we interpret the variables, control statements?</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  Hello, &#123;&#123; username &#125;&#125;!</span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for job in job_list %&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; job &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  Hello, archer!</span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>engineer<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>qa<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>pm<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>In an interpretation model, parsing produces a data structure representing the structure of the template. The rendering phase walks that data structure, assembling the result text based on the instructions it finds. For a real-world example, the Django template engine uses this approach.</p><p>In a compilation model, parsing produces some form of directly executable code. The rendering phase executes that code, producing the result. Jinja2 and Mako are two examples of template engines that use the compilation approach.</p><p>In this article, we use the compilation model, i.e in parsing phase, we will parse the template from string directly into Python code, i.e Python objects. and in rendering phase, we will execute the code and get the results.</p><p>Here is the design: class Templite responsible two things, first, parsing phase, accept template string, parse it and turn it into a render_func object, second, render phase, invoke and execute the render_func object.</p><p>In parsing phase, process template line by line, if met normal string literals, use CodeBuilder.add_line append this to the CodeBuilder.code list, especially in render_func’s result list. so you should see this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CodeBuilder.add_line(<span class="string">'result.apend("&lt;html&gt;\nHello ") '</span>)</span><br></pre></td></tr></table></figure><p>If it is a expression, should append this variable into render_func’s result list, as follows:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CodeBuilder.add_line(str(username))</span><br></pre></td></tr></table></figure><p>when it finished parsing, CodeBuilder.code should contains all string code of the render_func, if you join them together, you will got following string:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">def render_function(context, do_dots):</span></span><br><span class="line"><span class="string">    c_username = context['username']</span></span><br><span class="line"><span class="string">    c_job_list = context['job_list']</span></span><br><span class="line"><span class="string">    result = []</span></span><br><span class="line"><span class="string">    append_result = result.append</span></span><br><span class="line"><span class="string">    extend_result = result.extend</span></span><br><span class="line"><span class="string">    to_str = str</span></span><br><span class="line"><span class="string">    extend_result(['\n&lt;html&gt;\n  Hello, ', to_str(c_username), '!\n  &lt;ul&gt;\n    '])</span></span><br><span class="line"><span class="string">    for c_job in c_job_list:</span></span><br><span class="line"><span class="string">        extend_result(['\n      &lt;li&gt;', to_str(c_job), '&lt;/li&gt;\n    '])</span></span><br><span class="line"><span class="string">    append_result('\n  &lt;/ul&gt;\n&lt;/html&gt;\n')</span></span><br><span class="line"><span class="string">    return ''.join(result)</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>then use Python’s exec turn this string into a real Python function object.</p><p>In render phase, you call render function, actually, it executes the render_func returned in parsing phase, and thus you got the real html.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Templite</span><span class="params">(object)</span>:</span></span><br><span class="line">  <span class="string">""" Template Engine Implmentation """</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, template)</span>:</span></span><br><span class="line">    <span class="string">""" responsible turn template from string into Python code object through CodeBuilder """</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">render</span><span class="params">(self, context)</span>:</span></span><br><span class="line">    <span class="string">""" run the code object prepared by __init__ with context data, will return the interpreted template in html format """</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CodeBuilder</span><span class="params">(object)</span>:</span></span><br><span class="line">  <span class="string">""" responsible for build a string representation of the render_function, and method that will return the string representation function to a Python code object """</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, indent = <span class="number">0</span>)</span>:</span></span><br><span class="line">    self.code = []</span><br><span class="line">    self.indent_level = indent</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">add_line</span><span class="params">(self, line)</span>:</span></span><br><span class="line">    <span class="string">""" add a line into code with right indentation """</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_render_fun</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">""" get render function in Python object """</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>Here is the data flow:<br>1st, input following template</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  Hello, &#123;&#123; person.username &#125;&#125;!</span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for job in job_list %&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; job &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2nd, Templite.<strong>init</strong> will accept this template as input, and parse it, if necessary invoke CodeBuilder<br>3rd, CodeBuiler will receive the following phrase from Templite.<strong>init</strong></p><ul><li>html string literal</li><li>expressions</li><li>controll tags</li></ul><p>append each line into a code object after parse and conversion</p><p>append each line into a code object after parse and conversion<br>4th, here is what code object looks like</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line"><span class="string">'def render_function(context, do_dots):'</span>, <span class="string">'\n'</span>,</span><br><span class="line"><span class="string">'    '</span>, <span class="string">'result = []'</span>, <span class="string">'\n'</span>,</span><br><span class="line"><span class="string">'    '</span>, <span class="string">'append_result = result.append'</span>, <span class="string">'\n'</span>,</span><br><span class="line"><span class="string">'    '</span>, <span class="string">'extend_result = result.extend'</span>, <span class="string">'\n'</span>,</span><br><span class="line"><span class="string">'    '</span>, <span class="string">'to_str = str'</span>, <span class="string">'\n'</span>,</span><br><span class="line"><span class="string">'    '</span>, <span class="string">"extend_result(['\\n&lt;html&gt;\\n  Hello, ', to_str(c_username), '!\\n  &lt;ul&gt;\\n    '])"</span>, <span class="string">'\n'</span>,</span><br><span class="line"><span class="string">'    '</span>, <span class="string">'for c_job in c_job_list:'</span>, <span class="string">'\n'</span>,</span><br><span class="line"><span class="string">'        '</span>, <span class="string">"extend_result(['\\n      &lt;li&gt;', to_str(c_job), '&lt;/li&gt;\\n    '])"</span>, <span class="string">'\n'</span>,</span><br><span class="line"> <span class="string">'    '</span>, <span class="string">"append_result('\\n  &lt;/ul&gt;\\n&lt;/html&gt;\\n')"</span>, <span class="string">'\n'</span>,</span><br><span class="line"> <span class="string">'    '</span>, <span class="string">"return ''.join(result)"</span>, <span class="string">'\n'</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>5th, in render function, get the render function from code object through exec and  stringify</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">render_function</span><span class="params">(context, do_dots)</span>:</span></span><br><span class="line">    c_username = context[<span class="string">'username'</span>]</span><br><span class="line">    c_job_list = context[<span class="string">'job_list'</span>]</span><br><span class="line">    result = []</span><br><span class="line">    append_result = result.append</span><br><span class="line">    extend_result = result.extend</span><br><span class="line">    to_str = str</span><br><span class="line">    extend_result([<span class="string">'\n&lt;html&gt;\n  Hello, '</span>, to_str(c_username), <span class="string">'!\n  &lt;ul&gt;\n    '</span>])</span><br><span class="line">    <span class="keyword">for</span> c_job <span class="keyword">in</span> c_job_list:</span><br><span class="line">        extend_result([<span class="string">'\n      &lt;li&gt;'</span>, to_str(c_job), <span class="string">'&lt;/li&gt;\n    '</span>])</span><br><span class="line">    append_result(<span class="string">'\n  &lt;/ul&gt;\n&lt;/html&gt;\n'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(result)</span><br></pre></td></tr></table></figure><p>6th, run this render function with the context data you provide</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  Hello, archer!</span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>engineer<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>qa<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>pm<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>for detailed implementation, refer <a href="https://github.com/csrgxtu/TemplateEngine/blob/500lines/templite.py" target="_blank" rel="noopener">TemplateEngine</a></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;How template engine works? the basic principle behind this.&lt;/li&gt;
&lt;li&gt;Implement a template engine&lt;/li&gt;
&lt;li&gt;What about Jinjia2?
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Poems</title>
    <link href="http://yoursite.com/2017/07/06/Poems/"/>
    <id>http://yoursite.com/2017/07/06/Poems/</id>
    <published>2017-07-06T14:23:20.000Z</published>
    <updated>2020-09-23T17:55:12.026Z</updated>
    
    <content type="html"><![CDATA[<p>在翻译文章的过程中忽遇如下古诗句，就摘录下来，以后教给儿子。</p><a id="more"></a><blockquote><p>少小离家老大回，安能辩我是雌雄。</p></blockquote><p>命苦的人啊，不知道在北上广经历了神马。</p><blockquote><p>红酥手，黄藤酒，两个黄鹂名翠柳。长亭外，古道边，一行白鹭上晴天。</p></blockquote><p>这个意境很美</p><blockquote><p>夜深忽梦少年事，惟梦闲人不梦君。</p></blockquote><p>应该和“君”有仇，故意回避。</p><blockquote><p>借问酒家何处有，姑苏城外寒山寺。</p></blockquote><p>瞎说</p><blockquote><p>洛阳亲友如相问，轻舟已过万重山。</p></blockquote><p>欠债逃跑</p><blockquote><p>爷娘闻女来，举身赴清池；阿姊闻妹来，自挂东南枝；小弟闻姊来，琵琶声停欲语迟。</p></blockquote><p>人品真差，连亲人都回避</p><blockquote><p>在天愿做比翼鸟，大难临头各自飞。</p></blockquote><p>如今的部分真实写真</p><blockquote><p>美人卷珠帘，万径人踪灭。两岸猿声啼不住，惊起蛙声一片。</p></blockquote><p>这是个美人吗</p><blockquote><p>劝君更尽一杯酒，从此萧郎是路人。</p></blockquote><p>如此绝情呀</p><blockquote><p>遥想公谨当年，小乔初嫁了，使我不得开心颜！</p></blockquote><p>我心爱的男银嫁给了一个女的</p><blockquote><p>垂死病中惊坐起，笑问客从何处来</p></blockquote><p>回光返照</p><blockquote><p>车辚辚，马萧萧，二月春风似剪刀。</p></blockquote><p>贾府本太悲观</p><blockquote><p>满堂花醉三千客，更无一人是知音。</p></blockquote><p>天才是孤独的</p><blockquote><p>垂死病中惊坐起，夜深还过女嫱来。</p></blockquote><p>想到了白孝文</p><blockquote><p>踏破铁鞋无觅处，那人却在灯火阑珊处。</p></blockquote><p>看我不锤死你</p><blockquote><p>问君能有几多愁，别是一番滋味在心头。</p></blockquote><p>反正言语不清</p><blockquote><p>飞流直下三千尺，不及汪伦送我情。</p></blockquote><p>汪伦把你咋了</p><blockquote><p>路漫漫其修远兮，壮士一去兮不复返！</p></blockquote><p>即有积极，又有悲观</p><blockquote><p>幽州司马青衫湿，并州太守知不知。</p></blockquote><p>是知音还是机情</p><blockquote><p>天苍苍，野茫茫，一树梨花压海棠。</p></blockquote><p>春光乍泄</p><blockquote><p>春宵一刻值千金，绝知此事要躬行。<br>后宫佳丽三千人，铁杵磨成绣花针。</p></blockquote><p>–</p><blockquote><p>床前明月光，对影成三人。</p></blockquote><p>听说李白很浪荡</p><blockquote><p>人生得意须尽欢，从此君王不早朝。<br>朕与先生解战袍，芙蓉帐暖度春宵。</p></blockquote><p>君王也很苦</p><blockquote><p>唧唧复唧唧，相煎何太急<br>白日依山尽，大漠孤烟直。<br>两岸猿声啼不住，一枝红杏出墙来<br>但使飞龙将军在，六宫粉黛无颜色<br>春江水暖鸭先知，宣城太守知不知<br>车到山前必有路，千金散尽还复来。<br>阿姊闻妹来，当户理红妆，小弟闻姐来，磨刀嚯嚯向爹娘<br>松下问童子 自挂东南枝<br>听君一席话，自挂东南枝<br>今日听君歌一曲，明朝自挂东南枝<br>人生得意须尽欢,不及汪伦送我情<br>我自横刀向天笑 无人知是荔枝来<br>朕与先生解战袍，宣城太守知不知  </p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在翻译文章的过程中忽遇如下古诗句，就摘录下来，以后教给儿子。&lt;/p&gt;
    
    </summary>
    
    
      <category term="古诗" scheme="http://yoursite.com/tags/%E5%8F%A4%E8%AF%97/"/>
    
  </entry>
  
</feed>
